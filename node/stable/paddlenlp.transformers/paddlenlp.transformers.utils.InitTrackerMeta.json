{
    "api": "paddlenlp.transformers.utils.InitTrackerMeta",
    "type": "class",
    "version": "stable",
    "args_list": {
        "name": null,
        "bases": null,
        "attrs": null
    },
    "Bases": "type",
    "description": "This metaclass wraps the __init__ method of a class to add init_configattribute for instances of that class, and init_config use a dict to trackthe initial configuration. If the class has _pre_init or _post_initmethod, it would be hooked before or after __init__ and called as_pre_init(self, init_fn, init_args) or _post_init(self, init_fn, init_args).Since InitTrackerMeta would be used as metaclass for pretrained model classes,which always are Layer and type(Layer) is not type, thus use type(Layer)rather than type as base class for it to avoid inheritance metaclassconflicts.",
    "params": [
        {
            "name": "pre_init_func",
            "type": "callable",
            "description": "If provided, it would be hooked afterinit_func and called as pre_init_func(self, init_func, *init_args, **init_args).Default None.",
            "default": "",
            "optional": true
        },
        {
            "name": "post_init_func",
            "type": "callable",
            "description": "If provided, it would be hooked afterinit_func and called as post_init_func(self, init_func, *init_args, **init_args).Default None.",
            "default": "",
            "optional": true
        }
    ],
    "return": {
        "description": "the wrapped function",
        "type": "function"
    }
}