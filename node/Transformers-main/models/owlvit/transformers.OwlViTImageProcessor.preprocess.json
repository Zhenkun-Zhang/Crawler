{
    "api": "transformers.OwlViTImageProcessor.preprocess",
    "type": "function",
    "version": "main",
    "args_list": [
        "images:",
        "typing.Union[ForwardRef('PIL.Image.Image'),",
        "numpy.ndarray,",
        "ForwardRef('torch.Tensor'),",
        "list['PIL.Image.Image'],",
        "list[numpy.ndarray],",
        "list['torch.Tensor']]",
        "do_resize",
        "size",
        "int]]",
        "resample",
        "do_center_crop",
        "crop_size",
        "int]]",
        "do_rescale",
        "rescale_factor",
        "do_normalize",
        "image_mean",
        "typing.List[float],",
        "NoneType]",
        "image_std",
        "typing.List[float],",
        "NoneType]",
        "return_tensors",
        "transformers.utils.generic.TensorType,",
        "NoneType]",
        "data_format",
        "transformers.image_utils.ChannelDimension]",
        "<ChannelDimension.FIRST",
        "input_data_format",
        "transformers.image_utils.ChannelDimension,",
        "NoneType]"
    ],
    "params": [
        {
            "name": "images",
            "type": "ImageInput",
            "optional": false,
            "default": "",
            "description": "The image or batch of images to be prepared. Expects a single or batch of images with pixel valuesranging from 0 to 255. If passing in images with pixel values between 0 and 1, set do_rescale=False."
        },
        {
            "name": "do_resize",
            "type": "bool",
            "optional": true,
            "default": "",
            "description": "Whether or not to resize the input. If True, will resize the input to the size specified by size."
        },
        {
            "name": "size",
            "type": "Dict[str, int]",
            "optional": true,
            "default": "",
            "description": "The size to resize the input to. Only has an effect if do_resize is set to True."
        },
        {
            "name": "resample",
            "type": "PILImageResampling",
            "optional": true,
            "default": "",
            "description": "The resampling filter to use when resizing the input. Only has an effect if do_resize is set toTrue."
        },
        {
            "name": "do_center_crop",
            "type": "bool",
            "optional": true,
            "default": "",
            "description": "Whether or not to center crop the input. If True, will center crop the input to the size specified bycrop_size."
        },
        {
            "name": "crop_size",
            "type": "Dict[str, int]",
            "optional": true,
            "default": "",
            "description": "The size to center crop the input to. Only has an effect if do_center_crop is set to True."
        },
        {
            "name": "do_rescale",
            "type": "bool",
            "optional": true,
            "default": "",
            "description": "Whether or not to rescale the input. If True, will rescale the input by dividing it byrescale_factor."
        },
        {
            "name": "rescale_factor",
            "type": "float",
            "optional": true,
            "default": "",
            "description": "The factor to rescale the input by. Only has an effect if do_rescale is set to True."
        },
        {
            "name": "do_normalize",
            "type": "bool",
            "optional": true,
            "default": "",
            "description": "Whether or not to normalize the input. If True, will normalize the input by subtracting image_meanand dividing by image_std."
        },
        {
            "name": "image_mean",
            "type": "Union[float, List[float]]",
            "optional": true,
            "default": "",
            "description": "The mean to subtract from the input when normalizing. Only has an effect if do_normalize is set toTrue."
        },
        {
            "name": "image_std",
            "type": "Union[float, List[float]]",
            "optional": true,
            "default": "",
            "description": "The standard deviation to divide the input by when normalizing. Only has an effect if do_normalize isset to True."
        },
        {
            "name": "return_tensors",
            "type": "str,TensorType",
            "optional": true,
            "default": "",
            "description": "The type of tensors to return. Can be one of:Unset: Return a list of np.ndarray.TensorType.TENSORFLOW or tf: Return a batch of type tf.Tensor.TensorType.PYTORCH or pt: Return a batch of type torch.Tensor.TensorType.NUMPY or np: Return a batch of type np.ndarray.TensorType.JAX or jax: Return a batch of type jax.numpy.ndarray."
        },
        {
            "name": "data_format",
            "type": "ChannelDimension,str",
            "optional": true,
            "default": "",
            "description": "The channel dimension format for the output image. Can be one of:ChannelDimension.FIRST: image in (num_channels, height, width) format.ChannelDimension.LAST: image in (height, width, num_channels) format.Unset: defaults to the channel dimension format of the input image."
        },
        {
            "name": "input_data_format",
            "type": "ChannelDimension,str",
            "optional": true,
            "default": "",
            "description": "The channel dimension format for the input image. If unset, the channel dimension format is inferredfrom the input image. Can be one of:channels_first or ChannelDimension.FIRST: image in (num_channels, height, width) format.channels_last or ChannelDimension.LAST: image in (height, width, num_channels) format.none or ChannelDimension.NONE: image in (height, width) format."
        }
    ],
    "return": ""
}