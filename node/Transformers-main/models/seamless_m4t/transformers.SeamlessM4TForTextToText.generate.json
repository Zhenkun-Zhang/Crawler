{
    "api": "transformers.SeamlessM4TForTextToText.generate",
    "type": "function",
    "version": "main",
    "args_list": [
        "input_ids",
        "tgt_lang",
        "generation_config",
        "logits_processor",
        "stopping_criteria",
        "prefix_allowed_tokens_fn",
        "synced_gpus",
        "**kwargs",
        ")"
    ],
    "params": [
        {
            "name": "input_ids",
            "type": "torch.Tensor of varying shape depending on the modality",
            "optional": true,
            "default": "None",
            "description": "Indices of input sequence tokens in the vocabulary.Indices can be obtained using SeamlessM4TTokenizer or SeamlessM4TProcessor. SeePreTrainedTokenizer.encode() and PreTrainedTokenizer.call() for details.What are input IDs?"
        },
        {
            "name": "tgt_lang",
            "type": "str",
            "optional": true,
            "default": "None",
            "description": "The language to use as target language for translation."
        },
        {
            "name": "generation_config",
            "type": "~generation.GenerationConfig",
            "optional": true,
            "default": "None",
            "description": "The generation configuration to be used as base parametrization for the generation call. **kwargspassed to generate matching the attributes of generation_config will override them. Ifgeneration_config is not provided, the default will be used, which had the following loadingpriority: 1) from the generation_config.json model file, if it exists, 2) from the modelconfiguration. Please note that unspecified parameters will inherit GenerationConfigsdefault values, whose documentation should be checked to parameterize generation."
        },
        {
            "name": "logits_processor",
            "type": "LogitsProcessorList",
            "optional": true,
            "default": "None",
            "description": "Custom logits processors that complement the default logits processors built from arguments andgeneration config. If a logit processor is passed that is already created with the arguments or ageneration config an error is thrown. This feature is intended for advanced users."
        },
        {
            "name": "stopping_criteria",
            "type": "StoppingCriteriaList",
            "optional": true,
            "default": "None",
            "description": "Custom stopping criteria that complement the default stopping criteria built from arguments and ageneration config. If a stopping criteria is passed that is already created with the arguments or ageneration config an error is thrown. This feature is intended for advanced users."
        },
        {
            "name": "prefix_allowed_tokens_fn",
            "type": "Callable[[int, torch.Tensor], List[int]]",
            "optional": true,
            "default": "None",
            "description": "If provided, this function constraints the beam search to allowed tokens only at each step. If notprovided no constraint is applied. This function takes 2 arguments: the batch ID batch_id andinput_ids. It has to return a list with the allowed tokens for the next generation step conditionedon the batch ID batch_id and the previously generated tokens inputs_ids. This argument is usefulfor constrained generation conditioned on the prefix, as described in Autoregressive EntityRetrieval."
        },
        {
            "name": "synced_gpus",
            "type": "bool",
            "optional": true,
            "default": "False",
            "description": "Whether to continue running the while loop until max_length (needed to avoid deadlocking withFullyShardedDataParallel and DeepSpeed ZeRO Stage 3)."
        },
        {
            "name": "kwargs",
            "type": "Dict[str, Any]",
            "optional": true,
            "default": "",
            "description": "Ad hoc parametrization of generate_config and/or additional model-specific kwargs that will beforwarded to the forward function of the model."
        }
    ],
    "return": "ModelOutput or torch.LongTensor"
}