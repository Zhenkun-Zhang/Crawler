{
    "api": "transformers.VisualBertForPreTraining.forward",
    "type": "function",
    "version": "main",
    "args_list": [
        "input_ids:",
        "attention_mask",
        "token_type_ids",
        "position_ids",
        "head_mask",
        "inputs_embeds",
        "visual_embeds",
        "visual_attention_mask",
        "visual_token_type_ids",
        "image_text_alignment",
        "output_attentions",
        "output_hidden_states",
        "return_dict",
        "labels",
        "sentence_image_labels",
        ")"
    ],
    "params": [
        {
            "name": "input_ids",
            "type": "torch.LongTensor of shape (batch_size, sequence_length)",
            "optional": false,
            "default": "",
            "description": "Indices of input sequence tokens in the vocabulary.Indices can be obtained using AutoTokenizer. See PreTrainedTokenizer.encode() andPreTrainedTokenizer.call() for details.What are input IDs?"
        },
        {
            "name": "attention_mask",
            "type": "torch.FloatTensor of shape (batch_size, sequence_length",
            "optional": true,
            "default": "",
            "description": "Mask to avoid performing attention on padding token indices. Mask values selected in [0, 1]:1 for tokens that are not masked,0 for tokens that are masked.What are attention masks?"
        },
        {
            "name": "token_type_ids",
            "type": "torch.LongTensor of shape (batch_size, sequence_length",
            "optional": true,
            "default": "",
            "description": "Segment token indices to indicate first and second portions of the inputs. Indices are selected in [0, 1]:0 corresponds to a sentence A token,1 corresponds to a sentence B token.What are token type IDs?"
        },
        {
            "name": "position_ids",
            "type": "torch.LongTensor of shape (batch_size, sequence_length",
            "optional": true,
            "default": "",
            "description": "Indices of positions of each input sequence tokens in the position embeddings. Selected in the range [0, config.max_position_embeddings - 1].What are position IDs?"
        },
        {
            "name": "head_mask",
            "type": "torch.FloatTensor of shape (num_heads,),(num_layers, num_heads",
            "optional": true,
            "default": "",
            "description": "Mask to nullify selected heads of the self-attention modules. Mask values selected in [0, 1]:1 indicates the head is not masked,0 indicates the head is masked."
        },
        {
            "name": "inputs_embeds",
            "type": "torch.FloatTensor of shape (batch_size, sequence_length, hidden_size",
            "optional": true,
            "default": "",
            "description": "Optionally, instead of passing input_ids you can choose to directly pass an embedded representation. Thisis useful if you want more control over how to convert input_ids indices into associated vectors than themodels internal embedding lookup matrix."
        },
        {
            "name": "visual_embeds",
            "type": "torch.FloatTensor of shape (batch_size, visual_seq_length, visual_embedding_dim",
            "optional": true,
            "default": "",
            "description": "The embedded representation of the visual inputs, generally derived using using an object detector."
        },
        {
            "name": "visual_attention_mask",
            "type": "torch.FloatTensor of shape (batch_size, visual_seq_length",
            "optional": true,
            "default": "",
            "description": "Mask to avoid performing attention on visual embeddings. Mask values selected in [0, 1]:1 for tokens that are not masked,0 for tokens that are masked.What are attention masks?"
        },
        {
            "name": "visual_token_type_ids",
            "type": "torch.LongTensor of shape (batch_size, visual_seq_length",
            "optional": true,
            "default": "",
            "description": "Segment token indices to indicate different portions of the visual embeds.What are token type IDs? The authors of VisualBERT set thevisual_token_type_ids to 1 for all tokens."
        },
        {
            "name": "image_text_alignment",
            "type": "torch.LongTensor of shape (batch_size, visual_seq_length, alignment_number",
            "optional": true,
            "default": "",
            "description": "Image-Text alignment uses to decide the position IDs of the visual embeddings."
        },
        {
            "name": "output_attentions",
            "type": "bool",
            "optional": true,
            "default": "",
            "description": "Whether or not to return the attentions tensors of all attention layers. See attentions under returnedtensors for more detail."
        },
        {
            "name": "output_hidden_states",
            "type": "bool",
            "optional": true,
            "default": "",
            "description": "Whether or not to return the hidden states of all layers. See hidden_states under returned tensors formore detail."
        },
        {
            "name": "return_dict",
            "type": "bool",
            "optional": true,
            "default": "",
            "description": "Whether or not to return a ModelOutput instead of a plain tuple."
        },
        {
            "name": "labels",
            "type": "torch.LongTensor of shape (batch_size, total_sequence_length",
            "optional": true,
            "default": "",
            "description": "Labels for computing the masked language modeling loss. Indices should be in [-100, 0, ..., config.vocab_size] (see input_ids docstring) Tokens with indices set to -100 are ignored (masked), theloss is only computed for the tokens with labels in [0, ..., config.vocab_size]"
        },
        {
            "name": "sentence_image_labels",
            "type": "torch.LongTensor of shape (batch_size,",
            "optional": true,
            "default": "",
            "description": "Labels for computing the sentence-image prediction (classification) loss. Input should be a sequence pair(see input_ids docstring) Indices should be in [0, 1]:0 indicates sequence B is a matching pair of sequence A for the given image,1 indicates sequence B is a random sequence w.r.t A for the given image."
        }
    ],
    "return": "transformers.models.visual_bert.modeling_visual_bert.VisualBertForPreTrainingOutput or tuple(torch.FloatTensor)"
}