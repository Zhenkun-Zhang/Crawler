{
    "api": "transformers.modeling_utils.SQuADHead.forward",
    "type": "function",
    "version": "main",
    "args_list": [
        "hidden_states:",
        "FloatTensor",
        "start_positions",
        "end_positions",
        "cls_index",
        "is_impossible",
        "p_mask",
        "return_dict",
        ")"
    ],
    "params": [
        {
            "name": "hidden_states",
            "type": "torch.FloatTensor of shape (batch_size, seq_len, hidden_size)",
            "optional": false,
            "default": "",
            "description": "Final hidden states of the model on the sequence tokens."
        },
        {
            "name": "start_positions",
            "type": "torch.LongTensor of shape (batch_size,",
            "optional": true,
            "default": "",
            "description": "Positions of the first token for the labeled span."
        },
        {
            "name": "end_positions",
            "type": "torch.LongTensor of shape (batch_size,",
            "optional": true,
            "default": "",
            "description": "Positions of the last token for the labeled span."
        },
        {
            "name": "cls_index",
            "type": "torch.LongTensor of shape (batch_size,",
            "optional": true,
            "default": "",
            "description": "Position of the CLS token for each sentence in the batch. If None, takes the last token."
        },
        {
            "name": "is_impossible",
            "type": "torch.LongTensor of shape (batch_size,",
            "optional": true,
            "default": "",
            "description": "Whether the question has a possible answer in the paragraph or not."
        },
        {
            "name": "p_mask",
            "type": "torch.FloatTensor of shape (batch_size, seq_len",
            "optional": true,
            "default": "",
            "description": "Mask for tokens at invalid position, such as query and special symbols (PAD, SEP, CLS). 1.0 means tokenshould be masked."
        },
        {
            "name": "return_dict",
            "type": "bool",
            "optional": true,
            "default": "",
            "description": "Whether or not to return a ModelOutput instead of a plain tuple."
        }
    ],
    "return": "transformers.modeling_utils.SquadHeadOutput or tuple(torch.FloatTensor)"
}