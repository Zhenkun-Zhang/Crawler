{
    "api": "transformers.VisionEncoderDecoderModel.forward",
    "type": "function",
    "version": "main",
    "args_list": [
        "pixel_values:",
        "decoder_input_ids",
        "decoder_attention_mask",
        "encoder_outputs",
        "past_key_values",
        "decoder_inputs_embeds",
        "labels",
        "use_cache",
        "output_attentions",
        "output_hidden_states",
        "return_dict",
        "**kwargs",
        ")"
    ],
    "params": [
        {
            "name": "pixel_values",
            "type": "torch.FloatTensor of shape (batch_size, num_channels, height, width)",
            "optional": false,
            "default": "",
            "description": "Pixel values. Pixel values can be obtained using an image processor (e.g. if you use ViT as the encoder,you should use AutoImageProcessor). See ViTImageProcessor.call() for details."
        },
        {
            "name": "decoder_input_ids",
            "type": "torch.LongTensor of shape (batch_size, target_sequence_length",
            "optional": true,
            "default": "",
            "description": "Indices of decoder input sequence tokens in the vocabulary.Indices can be obtained using PreTrainedTokenizer. See PreTrainedTokenizer.encode() andPreTrainedTokenizer.call() for details.What are input IDs?If past_key_values is used, optionally only the last decoder_input_ids have to be input (seepast_key_values).For training, decoder_input_ids are automatically created by the model by shifting the labels to theright, replacing -100 by the pad_token_id and prepending them with the decoder_start_token_id."
        },
        {
            "name": "decoder_attention_mask",
            "type": "torch.BoolTensor of shape (batch_size, target_sequence_length",
            "optional": true,
            "default": "",
            "description": "Default behavior: generate a tensor that ignores pad tokens in decoder_input_ids. Causal mask will alsobe used by default."
        },
        {
            "name": "encoder_outputs",
            "type": "tuple(torch.FloatTensor",
            "optional": true,
            "default": "",
            "description": "This tuple must consist of (last_hidden_state, optional: hidden_states, optional: attentions)last_hidden_state (torch.FloatTensor of shape (batch_size, sequence_length, hidden_size)) is a tensorof hidden-states at the output of the last layer of the encoder. Used in the cross-attention of thedecoder."
        },
        {
            "name": "past_key_values",
            "type": "tuple(tuple(torch.FloatTensor)) of length config.n_layers with each tuple having 4 tensors of shape (batch_size, num_heads, sequence_length - 1, embed_size_per_head)",
            "optional": false,
            "default": "",
            "description": "Contains precomputed key and value hidden states of the attention blocks. Can be used to speed up decoding.If past_key_values are used, the user can optionally input only the last decoder_input_ids (those thatdont have their past key value states given to this model) of shape (batch_size, 1) instead of alldecoder_input_ids of shape (batch_size, sequence_length)."
        },
        {
            "name": "decoder_inputs_embeds",
            "type": "torch.FloatTensor of shape (batch_size, target_sequence_length, hidden_size",
            "optional": true,
            "default": "",
            "description": "Optionally, instead of passing decoder_input_ids you can choose to directly pass an embeddedrepresentation. This is useful if you want more control over how to convert decoder_input_ids indicesinto associated vectors than the models internal embedding lookup matrix."
        },
        {
            "name": "labels",
            "type": "torch.LongTensor of shape (batch_size, sequence_length",
            "optional": true,
            "default": "",
            "description": "Labels for computing the masked language modeling loss for the decoder. Indices should be in [-100, 0, ..., config.vocab_size] (see input_ids docstring) Tokens with indices set to -100 are ignored(masked), the loss is only computed for the tokens with labels in [0, ..., config.vocab_size]"
        },
        {
            "name": "use_cache",
            "type": "bool",
            "optional": true,
            "default": "",
            "description": "If set to True, past_key_values key value states are returned and can be used to speed up decoding (seepast_key_values)."
        },
        {
            "name": "output_attentions",
            "type": "bool",
            "optional": true,
            "default": "",
            "description": "Whether or not to return the attentions tensors of all attention layers. See attentions under returnedtensors for more detail."
        },
        {
            "name": "output_hidden_states",
            "type": "bool",
            "optional": true,
            "default": "",
            "description": "Whether or not to return the hidden states of all layers. See hidden_states under returned tensors formore detail."
        },
        {
            "name": "return_dict",
            "type": "bool",
            "optional": true,
            "default": "",
            "description": "If set to True, the model will return a ~utils.Seq2SeqLMOutput instead of a plain tuple."
        },
        {
            "name": "kwargs",
            "type": "optional",
            "optional": true,
            "default": "",
            "description": "Remaining dictionary of keyword arguments. Keyword arguments come in two flavors:Without a prefix which will be input as **encoder_kwargs for the encoder forward function.With a decoder_ prefix which will be input as **decoder_kwargs for the decoder forward function."
        }
    ],
    "return": "transformers.modeling_outputs.Seq2SeqLMOutput or tuple(torch.FloatTensor)"
}