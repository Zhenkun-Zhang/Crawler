{
    "api": "transformers.TFLongformerForMultipleChoice.call",
    "type": "function",
    "version": "main",
    "args_list": [
        "input_ids:",
        "TFModelInputType",
        "|",
        "attention_mask",
        "|",
        "tf.Tensor",
        "|",
        "head_mask",
        "|",
        "tf.Tensor",
        "|",
        "token_type_ids",
        "|",
        "tf.Tensor",
        "|",
        "position_ids",
        "|",
        "tf.Tensor",
        "|",
        "global_attention_mask",
        "|",
        "tf.Tensor",
        "|",
        "inputs_embeds",
        "|",
        "tf.Tensor",
        "|",
        "output_attentions",
        "output_hidden_states",
        "return_dict",
        "labels",
        "|",
        "tf.Tensor",
        "|",
        "training",
        ")"
    ],
    "params": [
        {
            "name": "input_ids",
            "type": "np.ndarray,tf.Tensor of shape (batch_size, num_choices, sequence_length)",
            "optional": false,
            "default": "",
            "description": "Indices of input sequence tokens in the vocabulary.Indices can be obtained using AutoTokenizer. See PreTrainedTokenizer.call() andPreTrainedTokenizer.encode() for details.What are input IDs?"
        },
        {
            "name": "attention_mask",
            "type": "np.ndarray,tf.Tensor of shape (batch_size, num_choices, sequence_length",
            "optional": true,
            "default": "",
            "description": "Mask to avoid performing attention on padding token indices. Mask values selected in [0, 1]:1 for tokens that are not masked,0 for tokens that are masked.What are attention masks?"
        },
        {
            "name": "head_mask",
            "type": "np.ndarray,tf.Tensor of shape (encoder_layers, encoder_attention_heads",
            "optional": true,
            "default": "",
            "description": "Mask to nullify selected heads of the attention modules. Mask values selected in [0, 1]:1 indicates the head is not masked,0 indicates the head is masked."
        },
        {
            "name": "global_attention_mask",
            "type": "np.ndarray,tf.Tensor of shape (batch_size, num_choices, sequence_length",
            "optional": true,
            "default": "",
            "description": "Mask to decide the attention given on each token, local attention or global attention. Tokens with globalattention attends to all other tokens, and all other tokens attend to them. This is important fortask-specific finetuning because it makes the model more flexible at representing the task. For example,for classification, the  token should be given global attention. For QA, all question tokens should alsohave global attention. Please refer to the Longformer paper for moredetails. Mask values selected in [0, 1]:0 for local attention (a sliding window attention),1 for global attention (tokens that attend to all other tokens, and all other tokens attend to them)."
        },
        {
            "name": "token_type_ids",
            "type": "np.ndarray,tf.Tensor of shape (batch_size, num_choices, sequence_length",
            "optional": true,
            "default": "",
            "description": "Segment token indices to indicate first and second portions of the inputs. Indices are selected in [0, 1]:0 corresponds to a sentence A token,1 corresponds to a sentence B token.What are token type IDs?"
        },
        {
            "name": "position_ids",
            "type": "np.ndarray,tf.Tensor of shape (batch_size, num_choices, sequence_length",
            "optional": true,
            "default": "",
            "description": "Indices of positions of each input sequence tokens in the position embeddings. Selected in the range [0, config.max_position_embeddings - 1].What are position IDs?"
        },
        {
            "name": "inputs_embeds",
            "type": "np.ndarray,tf.Tensor of shape (batch_size, num_choices, sequence_length, hidden_size",
            "optional": true,
            "default": "",
            "description": "Optionally, instead of passing input_ids you can choose to directly pass an embedded representation. Thisis useful if you want more control over how to convert input_ids indices into associated vectors than themodels internal embedding lookup matrix."
        },
        {
            "name": "output_attentions",
            "type": "bool",
            "optional": true,
            "default": "",
            "description": "Whether or not to return the attentions tensors of all attention layers. See attentions under returnedtensors for more detail. This argument can be used only in eager mode, in graph mode the value in theconfig will be used instead."
        },
        {
            "name": "output_hidden_states",
            "type": "bool",
            "optional": true,
            "default": "",
            "description": "Whether or not to return the hidden states of all layers. See hidden_states under returned tensors formore detail. This argument can be used only in eager mode, in graph mode the value in the config will beused instead."
        },
        {
            "name": "return_dict",
            "type": "bool",
            "optional": true,
            "default": "",
            "description": "Whether or not to return a ModelOutput instead of a plain tuple. This argument can be used ineager mode, in graph mode the value will always be set to True."
        },
        {
            "name": "training",
            "type": "bool",
            "optional": true,
            "default": "",
            "description": "Whether or not to use the model in training mode (some modules like dropout modules have differentbehaviors between training and evaluation)."
        },
        {
            "name": "labels",
            "type": "tf.Tensor of shape (batch_size,",
            "optional": true,
            "default": "",
            "description": "Labels for computing the multiple choice classification loss. Indices should be in [0, ..., num_choices]where num_choices is the size of the second dimension of the input tensors. (See input_ids above)"
        }
    ],
    "return": "transformers.models.longformer.modeling_tf_longformer.TFLongformerMultipleChoiceModelOutput or tuple(tf.Tensor)"
}