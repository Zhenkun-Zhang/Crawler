{
    "api": "transformers.UnivNetFeatureExtractor.__call__",
    "type": "function",
    "version": "main",
    "args_list": [
        "raw_speech:",
        "typing.Union[numpy.ndarray,",
        "typing.List[float],",
        "typing.List[numpy.ndarray],",
        "typing.List[typing.List[float]]]",
        "sampling_rate",
        "padding",
        "str,",
        "transformers.utils.generic.PaddingStrategy]",
        "max_length",
        "truncation",
        "pad_to_multiple_of",
        "return_noise",
        "generator",
        "pad_end",
        "pad_length",
        "do_normalize",
        "return_attention_mask",
        "return_tensors",
        "transformers.utils.generic.TensorType,",
        "NoneType]"
    ],
    "params": [
        {
            "name": "raw_speech",
            "type": "np.ndarray, List[float], List[np.ndarray], List[List[float]]",
            "optional": false,
            "default": "",
            "description": "The sequence or batch of sequences to be padded. Each sequence can be a numpy array, a list of floatvalues, a list of numpy arrays or a list of list of float values. Must be mono channel audio, notstereo, i.e. single float per timestep."
        },
        {
            "name": "sampling_rate",
            "type": "int",
            "optional": true,
            "default": "",
            "description": "The sampling rate at which the raw_speech input was sampled. It is strongly recommended to passsampling_rate at the forward call to prevent silent errors and allow automatic speech recognitionpipeline."
        },
        {
            "name": "padding",
            "type": "bool, str,PaddingStrategy",
            "optional": true,
            "default": "",
            "description": "Select a strategy to pad the input raw_speech waveforms (according to the models padding side andpadding index) among:True or longest: Pad to the longest sequence in the batch (or no padding if only a singlesequence if provided).max_length: Pad to a maximum length specified with the argument max_length or to the maximumacceptable input length for the model if that argument is not provided.False or do_not_pad (default): No padding (i.e., can output a batch with sequences of differentlengths).If pad_end = True, that padding will occur before the padding strategy is applied."
        },
        {
            "name": "max_length",
            "type": "int",
            "optional": true,
            "default": "",
            "description": "Maximum length of the returned list and optionally padding length (see above)."
        },
        {
            "name": "truncation",
            "type": "bool",
            "optional": true,
            "default": "",
            "description": "Activates truncation to cut input sequences longer than max_length to max_length."
        },
        {
            "name": "pad_to_multiple_of",
            "type": "int",
            "optional": true,
            "default": "",
            "description": "If set will pad the sequence to a multiple of the provided value.This is especially useful to enable the use of Tensor Cores on NVIDIA hardware with compute capability>= 7.5 (Volta), or on TPUs which benefit from having sequence lengths be a multiple of 128."
        },
        {
            "name": "return_noise",
            "type": "bool",
            "optional": true,
            "default": "",
            "description": "Whether to generate and return a noise waveform for use in UnivNetModel.forward()."
        },
        {
            "name": "generator",
            "type": "numpy.random.Generator",
            "optional": true,
            "default": "",
            "description": "An optional numpy.random.Generator random number generator to use when generating noise."
        },
        {
            "name": "pad_end",
            "type": "bool",
            "optional": true,
            "default": "",
            "description": "Whether to pad the end of each waveform with silence. This can help reduce artifacts at the end of thegenerated audio sample, see https://github.com/seungwonpark/melgan/issues/8 for more details. Thispadding will be done before the padding strategy specified in padding is performed."
        },
        {
            "name": "pad_length",
            "type": "int",
            "optional": true,
            "default": "",
            "description": "If padding the end of each waveform, the length of the padding in spectrogram frames. If not set, thiswill default to self.config.pad_end_length."
        },
        {
            "name": "do_normalize",
            "type": "bool",
            "optional": true,
            "default": "",
            "description": "Whether to perform Tacotron 2 normalization on the input. Normalizing can help to significantly improvethe performance for some models. If not set, this will default to self.config.do_normalize."
        },
        {
            "name": "return_attention_mask",
            "type": "bool",
            "optional": true,
            "default": "",
            "description": "Whether to return the attention mask. If left to the default, will return the attention mask accordingto the specific feature_extractors default.What are attention masks?"
        },
        {
            "name": "return_tensors",
            "type": "str,TensorType",
            "optional": true,
            "default": "",
            "description": "If set, will return tensors instead of list of python integers. Acceptable values are:tf: Return TensorFlow tf.constant objects.pt: Return PyTorch torch.np.array objects.np: Return Numpy np.ndarray objects."
        }
    ],
    "return": ""
}