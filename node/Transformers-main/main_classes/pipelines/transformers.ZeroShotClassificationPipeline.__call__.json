{
    "api": "transformers.ZeroShotClassificationPipeline.__call__",
    "type": "function",
    "version": "main",
    "args_list": [
        "sequences:",
        "typing.Union[str,",
        "typing.List[str]]",
        "*args",
        "**kwargs",
        ")"
    ],
    "params": [
        {
            "name": "sequences",
            "type": "str,List[str]",
            "optional": false,
            "default": "",
            "description": "The sequence(s) to classify, will be truncated if the model input is too large."
        },
        {
            "name": "candidate_labels",
            "type": "str,List[str]",
            "optional": false,
            "default": "",
            "description": "The set of possible class labels to classify each sequence into. Can be a single label, a string ofcomma-separated labels, or a list of labels."
        },
        {
            "name": "hypothesis_template",
            "type": "str",
            "optional": true,
            "default": "",
            "description": "The template used to turn each label into an NLI-style hypothesis. This template must include a {} orsimilar syntax for the candidate label to be inserted into the template. For example, the defaulttemplate is This example is {}. With the candidate label sports, this would be fed into themodel like <cls> sequence to classify <sep> This example is sports . <sep>. The default templateworks well in many cases, but it may be worthwhile to experiment with different templates depending onthe task setting."
        },
        {
            "name": "multi_label",
            "type": "bool",
            "optional": true,
            "default": "",
            "description": "Whether or not multiple candidate labels can be true. If False, the scores are normalized such thatthe sum of the label likelihoods for each sequence is 1. If True, the labels are consideredindependent and probabilities are normalized for each candidate by doing a softmax of the entailmentscore vs. the contradiction score."
        }
    ],
    "return": "A dict or a list of dict"
}