{
    "api": "transformers.FlaxEncoderDecoderModel.__call__",
    "type": "function",
    "version": "main",
    "args_list": [
        "input_ids:",
        "Array",
        "attention_mask",
        "decoder_input_ids",
        "decoder_attention_mask",
        "position_ids",
        "decoder_position_ids",
        "output_attentions",
        "output_hidden_states",
        "return_dict",
        "train",
        "params",
        "dropout_rng",
        "PRNGKey",
        "at",
        "0x7f3a03b75090>",
        ")"
    ],
    "params": [
        {
            "name": "input_ids",
            "type": "jnp.ndarray of shape (batch_size, sequence_length)",
            "optional": false,
            "default": "",
            "description": "Indices of input sequence tokens in the vocabulary. Padding will be ignored by default should you provideit.Indices can be obtained using PreTrainedTokenizer. See PreTrainedTokenizer.encode() andPreTrainedTokenizer.call() for details.What are input IDs?"
        },
        {
            "name": "attention_mask",
            "type": "jnp.ndarray of shape (batch_size, sequence_length",
            "optional": true,
            "default": "",
            "description": "Mask to avoid performing attention on padding token indices. Mask values selected in [0, 1]:1 for tokens that are not masked,0 for tokens that are masked.What are attention masks?"
        },
        {
            "name": "decoder_input_ids",
            "type": "jnp.ndarray of shape (batch_size, target_sequence_length",
            "optional": true,
            "default": "",
            "description": "Indices of decoder input sequence tokens in the vocabulary.Indices can be obtained using PreTrainedTokenizer. See PreTrainedTokenizer.encode() andPreTrainedTokenizer.call() for details.What are decoder input IDs?For sequence to sequence training, decoder_input_ids should be provided. decoder_input_ids should becreated outside of the model by shifting the labels to the right, replacing -100 by the pad_token_idand prepending them with the decoder_start_token_id."
        },
        {
            "name": "decoder_attention_mask",
            "type": "jnp.ndarray of shape (batch_size, target_sequence_length",
            "optional": true,
            "default": "",
            "description": "Default behavior: generate a tensor that ignores pad tokens in decoder_input_ids. Causal mask will alsobe used by default."
        },
        {
            "name": "position_ids",
            "type": "numpy.ndarray of shape (batch_size, sequence_length",
            "optional": true,
            "default": "",
            "description": "Indices of positions of each input sequence tokens in the position embeddings. Selected in the range [0, config.encoder.max_position_embeddings - 1]."
        },
        {
            "name": "decoder_position_ids",
            "type": "numpy.ndarray of shape (batch_size, sequence_length",
            "optional": true,
            "default": "",
            "description": "Indices of positions of each decoder input sequence tokens in the position embeddings. Selected in therange [0, config.decoder.max_position_embeddings - 1]."
        },
        {
            "name": "output_attentions",
            "type": "bool",
            "optional": true,
            "default": "",
            "description": "Whether or not to return the attentions tensors of all attention layers. See attentions under returnedtensors for more detail."
        },
        {
            "name": "output_hidden_states",
            "type": "bool",
            "optional": true,
            "default": "",
            "description": "Whether or not to return the hidden states of all layers. See hidden_states under returned tensors formore detail."
        },
        {
            "name": "return_dict",
            "type": "bool",
            "optional": true,
            "default": "",
            "description": "If set to True, the model will return a ~utils.FlaxSeq2SeqLMOutput instead of a plain tuple."
        }
    ],
    "return": "transformers.modeling_flax_outputs.FlaxSeq2SeqLMOutput or tuple(torch.FloatTensor)"
}