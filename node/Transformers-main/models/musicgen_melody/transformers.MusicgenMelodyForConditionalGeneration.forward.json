{
    "api": "transformers.MusicgenMelodyForConditionalGeneration.forward",
    "type": "function",
    "version": "main",
    "args_list": [
        "input_ids:",
        "attention_mask",
        "input_features",
        "decoder_input_ids",
        "decoder_attention_mask",
        "past_key_values",
        "encoder_hidden_states",
        "inputs_embeds",
        "decoder_inputs_embeds",
        "labels",
        "use_cache",
        "output_attentions",
        "output_hidden_states",
        "return_dict",
        "**kwargs",
        ")"
    ],
    "params": [
        {
            "name": "input_ids",
            "type": "torch.LongTensor of shape (batch_size, sequence_length)",
            "optional": false,
            "default": "",
            "description": "Indices of input sequence tokens in the vocabulary. Padding will be ignored by default should you provideit.Indices can be obtained using AutoTokenizer. See PreTrainedTokenizer.encode() andPreTrainedTokenizer.call() for details.What are input IDs?"
        },
        {
            "name": "attention_mask",
            "type": "torch.Tensor of shape (batch_size, sequence_length",
            "optional": true,
            "default": "",
            "description": "Mask to avoid performing attention on padding token indices. Mask values selected in [0, 1]:1 for tokens that are not masked,0 for tokens that are masked.What are attention masks?"
        },
        {
            "name": "input_features",
            "type": "torch.FloatTensor of shape (batch_size, audio_sequence_length, num_chroma)",
            "optional": false,
            "default": "",
            "description": "Input audio features.This should be returned by the MusicgenMelodyFeatureExtractor class that you can alsoretrieve from AutoFeatureExtractor. See MusicgenMelodyFeatureExtractor.__call__() for details."
        },
        {
            "name": "decoder_input_ids",
            "type": "torch.LongTensor of shape (batch_size * num_codebooks, target_sequence_length",
            "optional": true,
            "default": "",
            "description": "Indices of decoder input sequence tokens in the vocabulary, corresponding to the sequence of audio codes.Indices can be obtained by encoding an audio prompt with an audio encoder model to predict audio codes,such as with the EncodecModel. See EncodecModel.encode() for details.What are decoder input IDs?The decoder_input_ids will automatically be converted from shape (batch_size * num_codebooks, target_sequence_length) to (batch_size, num_codebooks, target_sequence_length) in the forward pass. Ifyou obtain audio codes from an audio encoding model, such as EncodecModel, ensure that the number offrames is equal to 1, and that you reshape the audio codes from (frames, batch_size, num_codebooks, target_sequence_length) to (batch_size * num_codebooks, target_sequence_length) prior to passing them asdecoder_input_ids."
        },
        {
            "name": "decoder_attention_mask",
            "type": "torch.LongTensor of shape (batch_size, target_sequence_length",
            "optional": true,
            "default": "",
            "description": "Default behavior: generate a tensor that ignores pad tokens in decoder_input_ids. Causal mask will alsobe used by default."
        },
        {
            "name": "past_key_values",
            "type": "tuple(tuple(torch.FloatTensor)",
            "optional": true,
            "default": "",
            "description": "Tuple of tuple(torch.FloatTensor) of length config.n_layers, with each tuple having 2 tensors of shape(batch_size, num_heads, encoder_sequence_length + sequence_length, embed_size_per_head)).Contains pre-computed hidden-states (key and values in the self-attention blocks) that can be used (see past_key_values input) to speed up sequential decoding.If past_key_values are used, the user can optionally input only the last decoder_input_ids (those thatdont have their past key value states given to this model) of shape (batch_size, 1) instead of alldecoder_input_ids of shape (batch_size, sequence_length)."
        },
        {
            "name": "encoder_hidden_states",
            "type": "torch.FloatTensor of shape (batch_size, encoder_sequence_length, hidden_size",
            "optional": true,
            "default": "",
            "description": "Sequence of conditional hidden-states representing the concatenation of the projeted text encoder output and the projeted audio encoder output.Used as a conditional signal and will thus be concatenated to the projeted decoder_input_ids."
        },
        {
            "name": "inputs_embeds",
            "type": "torch.FloatTensor of shape (batch_size, sequence_length, hidden_size",
            "optional": true,
            "default": "",
            "description": "Optionally, instead of passing input_ids you can choose to directly pass an embedded representation.This is useful if you want more control over how to convert input_ids indices into associated vectorsthan the models internal embedding lookup matrix."
        },
        {
            "name": "decoder_inputs_embeds",
            "type": "torch.FloatTensor of shape (batch_size, target_sequence_length, hidden_size",
            "optional": true,
            "default": "",
            "description": "Optionally, instead of passing decoder_input_ids you can choose to directly pass an embeddedrepresentation. If past_key_values is used, optionally only the last decoder_inputs_embeds have to beinput (see past_key_values). This is useful if you want more control over how to convertdecoder_input_ids indices into associated vectors than the models internal embedding lookup matrix.If decoder_input_ids and decoder_inputs_embeds are both unset, decoder_inputs_embeds takes the valueof inputs_embeds."
        },
        {
            "name": "labels",
            "type": "torch.LongTensor of shape (batch_size, sequence_length, num_codebooks",
            "optional": true,
            "default": "",
            "description": "Labels for language modeling. Note that the labels are shifted inside the model, i.e. you can setlabels = input_ids Indices are selected in [-100, 0, ..., config.vocab_size] All labels set to -100are ignored (masked), the loss is only computed for labels in [0, ..., config.vocab_size]"
        },
        {
            "name": "use_cache",
            "type": "bool",
            "optional": true,
            "default": "",
            "description": "If set to True, past_key_values key value states are returned and can be used to speed up decoding (seepast_key_values)."
        },
        {
            "name": "output_attentions",
            "type": "bool",
            "optional": true,
            "default": "",
            "description": "Whether or not to return the attentions tensors of all attention layers. See attentions under returnedtensors for more detail."
        },
        {
            "name": "output_hidden_states",
            "type": "bool",
            "optional": true,
            "default": "",
            "description": "Whether or not to return the hidden states of all layers. See hidden_states under returned tensors formore detail."
        },
        {
            "name": "return_dict",
            "type": "bool",
            "optional": true,
            "default": "",
            "description": "Whether or not to return a ModelOutput instead of a plain tuple."
        }
    ],
    "return": "transformers.models.musicgen_melody.modeling_musicgen_melody.MusicgenMelodyOutputWithPast or tuple(torch.FloatTensor)"
}