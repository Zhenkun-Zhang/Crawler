{
    "api": "transformers.FlaxGPTJForCausalLM.__call__",
    "type": "function",
    "version": "main",
    "args_list": [
        "input_ids",
        "attention_mask",
        "position_ids",
        "params",
        "past_key_values",
        "dropout_rng",
        "PRNGKey",
        "at",
        "0x7f3a03b75090>",
        "train",
        "output_attentions",
        "output_hidden_states",
        "return_dict",
        ")"
    ],
    "params": [
        {
            "name": "input_ids",
            "type": "numpy.ndarray of shape (batch_size, input_ids_length)",
            "optional": false,
            "default": "",
            "description": "input_ids_length = sequence_length. Indices of input sequence tokens in the vocabulary.Indices can be obtained using AutoTokenizer. See PreTrainedTokenizer.encode() andPreTrainedTokenizer.call() for details.What are input IDs?"
        },
        {
            "name": "attention_mask",
            "type": "numpy.ndarray of shape (batch_size, sequence_length",
            "optional": true,
            "default": "None",
            "description": "Mask to avoid performing attention on padding token indices. Mask values selected in [0, 1]:1 for tokens that are not masked,0 for tokens that are masked.What are attention masks?"
        },
        {
            "name": "position_ids",
            "type": "numpy.ndarray of shape (batch_size, sequence_length",
            "optional": true,
            "default": "None",
            "description": "Indices of positions of each input sequence tokens in the position embeddings. Selected in the range [0, config.max_position_embeddings - 1]."
        },
        {
            "name": "past_key_values",
            "type": "Dict[str, np.ndarray]",
            "optional": true,
            "default": "",
            "description": "Dictionary of pre-computed hidden-states (key and values in the attention blocks) that can be used for fastauto-regressive decoding. Pre-computed key and value hidden-states are of shape [batch_size, max_length]."
        },
        {
            "name": "output_attentions",
            "type": "bool",
            "optional": true,
            "default": "",
            "description": "Whether or not to return the attentions tensors of all attention layers. See attentions under returnedtensors for more detail."
        },
        {
            "name": "output_hidden_states",
            "type": "bool",
            "optional": true,
            "default": "",
            "description": "Whether or not to return the hidden states of all layers. See hidden_states under returned tensors formore detail."
        },
        {
            "name": "return_dict",
            "type": "bool",
            "optional": true,
            "default": "",
            "description": "Whether or not to return a ModelOutput instead of a plain tuple."
        }
    ],
    "return": "transformers.modeling_flax_outputs.FlaxMaskedLMOutput or tuple(torch.FloatTensor)"
}