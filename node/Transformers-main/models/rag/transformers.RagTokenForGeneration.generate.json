{
    "api": "transformers.RagTokenForGeneration.generate",
    "type": "function",
    "version": "main",
    "args_list": [
        "input_ids:",
        "attention_mask",
        "context_input_ids",
        "context_attention_mask",
        "doc_scores",
        "n_docs",
        "generation_config",
        "prefix_allowed_tokens_fn",
        "torch.Tensor],",
        "typing.List[int]]",
        "logits_processor",
        "stopping_criteria",
        "**kwargs",
        ")"
    ],
    "params": [
        {
            "name": "input_ids",
            "type": "torch.LongTensor of shape (batch_size, sequence_length",
            "optional": true,
            "default": "",
            "description": "The sequence used as a prompt for the generation. If input_ids is not passed, thencontext_input_ids has to be provided."
        },
        {
            "name": "attention_mask",
            "type": "torch.Tensor of shape (batch_size, sequence_length",
            "optional": true,
            "default": "",
            "description": "Mask to avoid performing attention on padding token indices. Mask values selected in [0, 1]:1 for tokens that are not masked,0 for tokens that are masked.What are attention masks?"
        },
        {
            "name": "context_input_ids",
            "type": "torch.LongTensor of shape (batch_size * config.n_docs, config.max_combined_length",
            "optional": true,
            "default": "",
            "description": "Input IDs post-processed from the retrieved documents and the question encoder input_ids by theretriever.If the model has is not initialized with a retriever, context_input_ids has to be provided to theforward pass. context_input_ids are returned by __call__()."
        },
        {
            "name": "context_attention_mask",
            "type": "torch.LongTensor of shape (batch_size * config.n_docs, config.max_combined_length",
            "optional": true,
            "default": "",
            "description": "Attention mask post-processed from the retrieved documents and the question encoder input_ids by theretriever.If the model has is not initialized with a retriever, context_input_ids has to be provided to theforward pass. context_input_ids are returned by __call__()."
        },
        {
            "name": "doc_scores",
            "type": "torch.FloatTensor of shape (batch_size, config.n_docs)",
            "optional": false,
            "default": "",
            "description": "Score between each retrieved document embeddings (see retrieved_doc_embeds) andquestion_encoder_last_hidden_state.If the model has is not initialized with a retriever, context_input_ids has to be provided to theforward pass. context_input_ids are returned by __call__()."
        },
        {
            "name": "n_docs",
            "type": "int",
            "optional": true,
            "default": "",
            "description": "Number of documents to retrieve and/or number of documents for which to generate an answer."
        },
        {
            "name": "generation_config",
            "type": "~generation.GenerationConfig",
            "optional": true,
            "default": "",
            "description": "The generation configuration to be used as base parametrization for the generation call. **kwargspassed to generate matching the attributes of generation_config will override them. Ifgeneration_config is not provided, the default will be used, which has the following loadingpriority: 1) from the generation_config.json model file, if it exists, 2) from the modelconfiguration. Please note that unspecified parameters will inherit GenerationConfigsdefault values, whose documentation should be checked to parameterize generation."
        },
        {
            "name": "prefix_allowed_tokens_fn",
            "type": "Callable[[int, torch.Tensor], List[int]]",
            "optional": true,
            "default": "",
            "description": "If provided, this function constraints the beam search to allowed tokens only at each step. If notprovided no constraint is applied. This function takes 2 arguments inputs_ids and the batch IDbatch_id. It has to return a list with the allowed tokens for the next generation step conditioned onthe previously generated tokens inputs_ids and the batch ID batch_id. This argument is useful forconstrained generation conditioned on the prefix, as described in Autoregressive EntityRetrieval."
        },
        {
            "name": "logits_processor",
            "type": "LogitsProcessorList",
            "optional": true,
            "default": "",
            "description": "Custom logits processors that complement the default logits processors built from arguments and amodels config. If a logit processor is passed that is already created with the arguments or a modelsconfig an error is thrown."
        },
        {
            "name": "stopping_criteria",
            "type": "StoppingCriteriaList",
            "optional": true,
            "default": "",
            "description": "Custom stopping criteria that complement the default stopping criteria built from arguments and amodels config. If a stopping criteria is passed that is already created with the arguments or amodels config an error is thrown."
        },
        {
            "name": "kwargs",
            "type": "Dict[str, Any]",
            "optional": true,
            "default": "",
            "description": "Ad hoc parametrization of generate_config and/or additional model-specific kwargs that will beforwarded to the forward function of the model."
        }
    ],
    "return": "torch.LongTensor of shape (batch_size * num_return_sequences, sequence_length)"
}