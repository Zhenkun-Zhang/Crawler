{
    "api": "transformers.SpeechT5ForTextToSpeech.generate",
    "type": "function",
    "version": "main",
    "args_list": [
        "input_ids:",
        "LongTensor",
        "attention_mask",
        "speaker_embeddings",
        "threshold",
        "minlenratio",
        "maxlenratio",
        "vocoder",
        "output_cross_attentions",
        "return_output_lengths",
        "**kwargs",
        ")"
    ],
    "params": [
        {
            "name": "input_ids",
            "type": "torch.LongTensor of shape (batch_size, sequence_length)",
            "optional": false,
            "default": "",
            "description": "Indices of input sequence tokens in the vocabulary.Indices can be obtained using SpeechT5Tokenizer. See encode() andcall() for details.What are input IDs?"
        },
        {
            "name": "attention_mask",
            "type": "torch.LongTensor of shape (batch_size, sequence_length)",
            "optional": false,
            "default": "",
            "description": "Attention mask from the tokenizer, required for batched inference to signal to the model where toignore padded tokens from the input_ids."
        },
        {
            "name": "speaker_embeddings",
            "type": "torch.FloatTensor of shape (batch_size, config.speaker_embedding_dim",
            "optional": true,
            "default": "",
            "description": "Tensor containing the speaker embeddings."
        },
        {
            "name": "threshold",
            "type": "float",
            "optional": true,
            "default": "",
            "description": "The generated sequence ends when the predicted stop token probability exceeds this value."
        },
        {
            "name": "minlenratio",
            "type": "float",
            "optional": true,
            "default": "",
            "description": "Used to calculate the minimum required length for the output sequence."
        },
        {
            "name": "maxlenratio",
            "type": "float",
            "optional": true,
            "default": "",
            "description": "Used to calculate the maximum allowed length for the output sequence."
        },
        {
            "name": "vocoder",
            "type": "nn.Module",
            "optional": true,
            "default": "",
            "description": "The vocoder that converts the mel spectrogram into a speech waveform. If None, the output is the melspectrogram."
        },
        {
            "name": "output_cross_attentions",
            "type": "bool",
            "optional": true,
            "default": "",
            "description": "Whether or not to return the attentions tensors of the decoders cross-attention layers."
        },
        {
            "name": "return_output_lengths",
            "type": "bool",
            "optional": true,
            "default": "",
            "description": "Whether or not to return the concrete spectrogram/waveform lengths."
        }
    ],
    "return": "tuple(torch.FloatTensor) comprising various elements depending on the inputs"
}