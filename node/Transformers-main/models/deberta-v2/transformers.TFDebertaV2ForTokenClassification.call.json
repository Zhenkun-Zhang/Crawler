{
    "api": "transformers.TFDebertaV2ForTokenClassification.call",
    "type": "function",
    "version": "main",
    "args_list": [
        "input_ids:",
        "TFModelInputType",
        "|",
        "attention_mask",
        "|",
        "tf.Tensor",
        "|",
        "token_type_ids",
        "|",
        "tf.Tensor",
        "|",
        "position_ids",
        "|",
        "tf.Tensor",
        "|",
        "inputs_embeds",
        "|",
        "tf.Tensor",
        "|",
        "output_attentions",
        "output_hidden_states",
        "return_dict",
        "labels",
        "|",
        "tf.Tensor",
        "|",
        "training",
        ")"
    ],
    "params": [
        {
            "name": "input_ids",
            "type": "np.ndarray, tf.Tensor, List[tf.Tensor] `Dict[str, tf.Tensor],Dict[str, np.ndarray] and each example must have the shape (batch_size, sequence_length)",
            "optional": false,
            "default": "",
            "description": "Indices of input sequence tokens in the vocabulary.Indices can be obtained using AutoTokenizer. See PreTrainedTokenizer.encode() andPreTrainedTokenizer.call() for details.What are input IDs?"
        },
        {
            "name": "attention_mask",
            "type": "np.ndarray,tf.Tensor of shape (batch_size, sequence_length",
            "optional": true,
            "default": "",
            "description": "Mask to avoid performing attention on padding token indices. Mask values selected in [0, 1]:1 for tokens that are not masked,0 for tokens that are masked.What are attention masks?"
        },
        {
            "name": "token_type_ids",
            "type": "np.ndarray,tf.Tensor of shape (batch_size, sequence_length",
            "optional": true,
            "default": "",
            "description": "Segment token indices to indicate first and second portions of the inputs. Indices are selected in [0, 1]:0 corresponds to a sentence A token,1 corresponds to a sentence B token.What are token type IDs?"
        },
        {
            "name": "position_ids",
            "type": "np.ndarray,tf.Tensor of shape (batch_size, sequence_length",
            "optional": true,
            "default": "",
            "description": "Indices of positions of each input sequence tokens in the position embeddings. Selected in the range [0, config.max_position_embeddings - 1].What are position IDs?"
        },
        {
            "name": "inputs_embeds",
            "type": "np.ndarray,tf.Tensor of shape (batch_size, sequence_length, hidden_size",
            "optional": true,
            "default": "",
            "description": "Optionally, instead of passing input_ids you can choose to directly pass an embedded representation. Thisis useful if you want more control over how to convert input_ids indices into associated vectors than themodels internal embedding lookup matrix."
        },
        {
            "name": "output_attentions",
            "type": "bool",
            "optional": true,
            "default": "",
            "description": "Whether or not to return the attentions tensors of all attention layers. See attentions under returnedtensors for more detail."
        },
        {
            "name": "output_hidden_states",
            "type": "bool",
            "optional": true,
            "default": "",
            "description": "Whether or not to return the hidden states of all layers. See hidden_states under returned tensors formore detail."
        },
        {
            "name": "return_dict",
            "type": "bool",
            "optional": true,
            "default": "",
            "description": "Whether or not to return a [`~utils.ModelOutput] instead of a plain tuple."
        },
        {
            "name": "labels",
            "type": "tf.Tensor,np.ndarray of shape (batch_size, sequence_length",
            "optional": true,
            "default": "",
            "description": "Labels for computing the token classification loss. Indices should be in [0, ..., config.num_labels - 1]."
        }
    ],
    "return": "transformers.modeling_tf_outputs.TFTokenClassifierOutput or tuple(tf.Tensor)"
}