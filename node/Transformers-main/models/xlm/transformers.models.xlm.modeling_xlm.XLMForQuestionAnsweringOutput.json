{
    "api": "transformers.models.xlm.modeling_xlm.XLMForQuestionAnsweringOutput",
    "type": "class",
    "version": "main",
    "args_list": [
        "loss:",
        "start_top_log_probs",
        "start_top_index",
        "end_top_log_probs",
        "end_top_index",
        "cls_logits",
        "hidden_states",
        "...]]",
        "attentions",
        "...]]"
    ],
    "params": [
        {
            "name": "loss",
            "type": "torch.FloatTensor of shape (1,",
            "optional": true,
            "default": "",
            "description": "Classification loss as the sum of start token, end token (and is_impossible if provided) classificationlosses."
        },
        {
            "name": "start_top_log_probs",
            "type": "torch.FloatTensor of shape (batch_size, config.start_n_top",
            "optional": true,
            "default": "",
            "description": "Log probabilities for the top config.start_n_top start token possibilities (beam-search)."
        },
        {
            "name": "start_top_index",
            "type": "torch.LongTensor of shape (batch_size, config.start_n_top",
            "optional": true,
            "default": "",
            "description": "Indices for the top config.start_n_top start token possibilities (beam-search)."
        },
        {
            "name": "end_top_log_probs",
            "type": "torch.FloatTensor of shape (batch_size, config.start_n_top * config.end_n_top",
            "optional": true,
            "default": "",
            "description": "Log probabilities for the top config.start_n_top * config.end_n_top end token possibilities(beam-search)."
        },
        {
            "name": "end_top_index",
            "type": "torch.LongTensor of shape (batch_size, config.start_n_top * config.end_n_top",
            "optional": true,
            "default": "",
            "description": "Indices for the top config.start_n_top * config.end_n_top end token possibilities (beam-search)."
        },
        {
            "name": "cls_logits",
            "type": "torch.FloatTensor of shape (batch_size,",
            "optional": true,
            "default": "",
            "description": "Log probabilities for the is_impossible label of the answers."
        },
        {
            "name": "hidden_states",
            "type": "tuple(torch.FloatTensor",
            "optional": true,
            "default": "",
            "description": "Tuple of torch.FloatTensor (one for the output of the embeddings + one for the output of each layer) ofshape (batch_size, sequence_length, hidden_size).Hidden-states of the model at the output of each layer plus the initial embedding outputs."
        },
        {
            "name": "attentions",
            "type": "tuple(torch.FloatTensor",
            "optional": true,
            "default": "",
            "description": "Tuple of torch.FloatTensor (one for each layer) of shape (batch_size, num_heads, sequence_length, sequence_length).Attentions weights after the attention softmax, used to compute the weighted average in the self-attentionheads."
        }
    ],
    "return": ""
}