{
    "api": "transformers.GemmaTokenizer",
    "type": "class",
    "version": "main",
    "args_list": [
        "vocab_file",
        "unk_token",
        "bos_token",
        "eos_token",
        "pad_token",
        "sp_model_kwargs",
        "typing.Any]]",
        "add_bos_token",
        "add_eos_token",
        "clean_up_tokenization_spaces",
        "use_default_system_prompt",
        "spaces_between_special_tokens",
        "**kwargs"
    ],
    "params": [
        {
            "name": "vocab_file",
            "type": "str",
            "optional": false,
            "default": "",
            "description": "Path to the vocabulary file."
        },
        {
            "name": "unk_token",
            "type": "str,tokenizers.AddedToken",
            "optional": true,
            "default": "<unk>",
            "description": "The unknown token. A token that is not in the vocabulary cannot be converted to an ID and is set to be thistoken instead."
        },
        {
            "name": "bos_token",
            "type": "str,tokenizers.AddedToken",
            "optional": true,
            "default": "<bos>",
            "description": "The beginning of sequence token that was used during pretraining. Can be used a sequence classifier token."
        },
        {
            "name": "eos_token",
            "type": "str,tokenizers.AddedToken",
            "optional": true,
            "default": "<eos>",
            "description": "The end of sequence token."
        },
        {
            "name": "pad_token",
            "type": "str,tokenizers.AddedToken",
            "optional": true,
            "default": "<pad>",
            "description": "A special token used to make arrays of tokens the same size for batching purpose. Will then be ignored byattention mechanisms or loss computation."
        },
        {
            "name": "sp_model_kwargs",
            "type": "Dict[str, Any], Optional",
            "optional": true,
            "default": "",
            "description": "Will be passed to the SentencePieceProcessor.__init__() method. The Python wrapper forSentencePiece can be used, among other things,to set:enable_sampling: Enable subword regularization.nbest_size: Sampling parameters for unigram. Invalid for BPE-Dropout.nbest_size = {0,1}: No sampling is performed.nbest_size > 1: samples from the nbest_size results.nbest_size < 0: assuming that nbest_size is infinite and samples from the all hypothesis (lattice)using forward-filtering-and-backward-sampling algorithm.alpha: Smoothing parameter for unigram sampling, and dropout probability of merge operations forBPE-dropout."
        },
        {
            "name": "add_bos_token",
            "type": "bool",
            "optional": true,
            "default": "True",
            "description": "Whether or not to add an bos_token at the start of sequences."
        },
        {
            "name": "add_eos_token",
            "type": "bool",
            "optional": true,
            "default": "False",
            "description": "Whether or not to add an eos_token at the end of sequences."
        },
        {
            "name": "clean_up_tokenization_spaces",
            "type": "bool",
            "optional": true,
            "default": "False",
            "description": "Whether or not to cleanup spaces after decoding, cleanup consists in removing potential artifacts likeextra spaces."
        },
        {
            "name": "use_default_system_prompt",
            "type": "bool",
            "optional": true,
            "default": "False",
            "description": "Whether or not the default system prompt for Gemma should be used."
        },
        {
            "name": "spaces_between_special_tokens",
            "type": "bool",
            "optional": true,
            "default": "False",
            "description": "Whether or not to add spaces between special tokens."
        }
    ],
    "return": ""
}