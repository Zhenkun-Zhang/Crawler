{
    "api": "transformers.Wav2Vec2BertForCTC.forward",
    "type": "function",
    "version": "main",
    "args_list": [
        "input_features:",
        "attention_mask",
        "output_attentions",
        "output_hidden_states",
        "return_dict",
        "labels",
        ")"
    ],
    "params": [
        {
            "name": "input_features",
            "type": "torch.FloatTensor of shape (batch_size, sequence_length)",
            "optional": false,
            "default": "",
            "description": "Float values of input raw speech waveform. Values can be obtained by loading a .flac or .wav audio fileinto an array of type List[float] or a numpy.ndarray, e.g. via the soundfile library (pip install soundfile). To prepare the array into input_features, the AutoProcessor should be used for padding andconversion into a tensor of type torch.FloatTensor. See Wav2Vec2BertProcessor.call() for details."
        },
        {
            "name": "attention_mask",
            "type": "torch.LongTensor of shape (batch_size, sequence_length",
            "optional": true,
            "default": "",
            "description": "Mask to avoid performing convolution and attention on padding token indices. Mask values selected in [0, 1]:1 for tokens that are not masked,0 for tokens that are masked.What are attention masks?"
        },
        {
            "name": "output_attentions",
            "type": "bool",
            "optional": true,
            "default": "",
            "description": "Whether or not to return the attentions tensors of all attention layers. See attentions under returnedtensors for more detail."
        },
        {
            "name": "output_hidden_states",
            "type": "bool",
            "optional": true,
            "default": "",
            "description": "Whether or not to return the hidden states of all layers. See hidden_states under returned tensors formore detail."
        },
        {
            "name": "return_dict",
            "type": "bool",
            "optional": true,
            "default": "",
            "description": "Whether or not to return a ModelOutput instead of a plain tuple."
        },
        {
            "name": "labels",
            "type": "torch.LongTensor of shape (batch_size, target_length",
            "optional": true,
            "default": "",
            "description": "Labels for connectionist temporal classification. Note that target_length has to be smaller or equal tothe sequence length of the output logits. Indices are selected in [-100, 0, ..., config.vocab_size - 1].All labels set to -100 are ignored (masked), the loss is only computed for labels in [0, ..., config.vocab_size - 1]."
        }
    ],
    "return": "transformers.modeling_outputs.CausalLMOutput or tuple(torch.FloatTensor)"
}