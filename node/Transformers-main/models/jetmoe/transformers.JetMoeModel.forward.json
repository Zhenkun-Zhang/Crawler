{
    "api": "transformers.JetMoeModel.forward",
    "type": "function",
    "version": "main",
    "args_list": [
        "input_ids:",
        "LongTensor",
        "attention_mask",
        "position_ids",
        "past_key_values",
        "typing.List[torch.FloatTensor],",
        "NoneType]",
        "inputs_embeds",
        "use_cache",
        "output_attentions",
        "output_hidden_states",
        "output_router_logits",
        "cache_position"
    ],
    "params": [
        {
            "name": "input_ids",
            "type": "torch.LongTensor of shape ({0})",
            "optional": false,
            "default": "",
            "description": "Indices of input sequence tokens in the vocabulary.Indices can be obtained using AutoProcenizer. See PreTrainedTokenizer.encode() andPreTrainedTokenizer.call() for details.What are input IDs?"
        },
        {
            "name": "attention_mask",
            "type": "torch.FloatTensor of shape ({0}",
            "optional": true,
            "default": "",
            "description": "Mask to avoid performing attention on padding token indices. Mask values selected in [0, 1]:1 for tokens that are not masked,0 for tokens that are masked.What are attention masks?"
        },
        {
            "name": "position_ids",
            "type": "torch.LongTensor of shape ({0}",
            "optional": true,
            "default": "",
            "description": "Indices of positions of each input sequence tokens in the position embeddings. Selected in the range [0, config.n_positions - 1].What are position IDs?"
        },
        {
            "name": "inputs_embeds",
            "type": "torch.FloatTensor of shape ({0}, hidden_dim",
            "optional": true,
            "default": "",
            "description": "Optionally, instead of passing input_ids you can choose to directly pass an embedded representation. Thisis useful if you want more control over how to convert input_ids indices into associated vectors than themodels internal embedding lookup matrix."
        },
        {
            "name": "output_attentions",
            "type": "bool",
            "optional": true,
            "default": "",
            "description": "Whether or not to return the attentions tensors of all attention layers. See attentions under returnedtensors for more detail."
        },
        {
            "name": "output_hidden_states",
            "type": "bool",
            "optional": true,
            "default": "",
            "description": "Whether or not to return the hidden states of all layers. See hidden_states under returned tensors formore detail."
        },
        {
            "name": "output_router_logits",
            "type": "bool",
            "optional": true,
            "default": "",
            "description": "Whether or not to return the logits of all the routers. They are useful for computing the router loss, andshould not be returned during inference."
        },
        {
            "name": "return_dict",
            "type": "bool",
            "optional": true,
            "default": "",
            "description": "Whether or not to return a ModelOutput instead of a plain tuple."
        },
        {
            "name": "cache_position",
            "type": "torch.LongTensor of shape (sequence_length",
            "optional": true,
            "default": "",
            "description": "Indices depicting the position of the input sequence tokens in the sequence. Contrarily to position_ids,this tensor is not affected by padding. It is used to update the cache in the correct position and to inferthe complete sequence length."
        }
    ],
    "return": ""
}