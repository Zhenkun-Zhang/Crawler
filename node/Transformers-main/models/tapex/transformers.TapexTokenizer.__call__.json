{
    "api": "transformers.TapexTokenizer.__call__",
    "type": "function",
    "version": "main",
    "args_list": [
        "table:",
        "typing.Union[ForwardRef('pd.DataFrame'),",
        "typing.List[ForwardRef('pd.DataFrame')]]",
        "query",
        "typing.List[str],",
        "NoneType]",
        "answer",
        "typing.List[str]]",
        "add_special_tokens",
        "padding",
        "str,",
        "transformers.utils.generic.PaddingStrategy]",
        "truncation",
        "str,",
        "transformers.tokenization_utils_base.TruncationStrategy]",
        "max_length",
        "stride",
        "pad_to_multiple_of",
        "return_tensors",
        "transformers.utils.generic.TensorType,",
        "NoneType]",
        "return_token_type_ids",
        "return_attention_mask",
        "return_overflowing_tokens",
        "return_special_tokens_mask",
        "return_offsets_mapping",
        "return_length",
        "verbose",
        "**kwargs"
    ],
    "params": [
        {
            "name": "table",
            "type": "pd.DataFrame, List[pd.DataFrame]",
            "optional": false,
            "default": "",
            "description": "Table(s) containing tabular data."
        },
        {
            "name": "query",
            "type": "str,List[str]",
            "optional": true,
            "default": "",
            "description": "Sentence or batch of sentences related to one or more table(s) to be encoded. Note that the number ofsentences must match the number of tables."
        },
        {
            "name": "answer",
            "type": "str,List[str]",
            "optional": true,
            "default": "",
            "description": "Optionally, the corresponding answer to the questions as supervision."
        },
        {
            "name": "add_special_tokens",
            "type": "bool",
            "optional": true,
            "default": "",
            "description": "Whether or not to add special tokens when encoding the sequences. This will use the underlyingPretrainedTokenizerBase.build_inputs_with_special_tokens function, which defines which tokens areautomatically added to the input ids. This is useful if you want to add bos or eos tokensautomatically."
        },
        {
            "name": "padding",
            "type": "bool, str,PaddingStrategy",
            "optional": true,
            "default": "",
            "description": "Activates and controls padding. Accepts the following values:True or longest: Pad to the longest sequence in the batch (or no padding if only a singlesequence if provided).max_length: Pad to a maximum length specified with the argument max_length or to the maximumacceptable input length for the model if that argument is not provided.False or do_not_pad (default): No padding (i.e., can output a batch with sequences of differentlengths)."
        },
        {
            "name": "truncation",
            "type": "bool, str,TruncationStrategy",
            "optional": true,
            "default": "",
            "description": "Activates and controls truncation. Accepts the following values:True or longest_first: Truncate to a maximum length specified with the argument max_length orto the maximum acceptable input length for the model if that argument is not provided. This willtruncate token by token, removing a token from the longest sequence in the pair if a pair ofsequences (or a batch of pairs) is provided.only_first: Truncate to a maximum length specified with the argument max_length or to themaximum acceptable input length for the model if that argument is not provided. This will onlytruncate the first sequence of a pair if a pair of sequences (or a batch of pairs) is provided.only_second: Truncate to a maximum length specified with the argument max_length or to themaximum acceptable input length for the model if that argument is not provided. This will onlytruncate the second sequence of a pair if a pair of sequences (or a batch of pairs) is provided.False or do_not_truncate (default): No truncation (i.e., can output batch with sequence lengthsgreater than the model maximum admissible input size)."
        },
        {
            "name": "max_length",
            "type": "int",
            "optional": true,
            "default": "",
            "description": "Controls the maximum length to use by one of the truncation/padding parameters.If left unset or set to None, this will use the predefined model maximum length if a maximum lengthis required by one of the truncation/padding parameters. If the model has no specific maximum inputlength (like XLNet) truncation/padding to a maximum length will be deactivated."
        },
        {
            "name": "stride",
            "type": "int",
            "optional": true,
            "default": "",
            "description": "If set to a number along with max_length, the overflowing tokens returned whenreturn_overflowing_tokens=True will contain some tokens from the end of the truncated sequencereturned to provide some overlap between truncated and overflowing sequences. The value of thisargument defines the number of overlapping tokens."
        },
        {
            "name": "is_split_into_words",
            "type": "bool",
            "optional": true,
            "default": "",
            "description": "Whether or not the input is already pre-tokenized (e.g., split into words). If set to True, thetokenizer assumes the input is already split into words (for instance, by splitting it on whitespace)which it will tokenize. This is useful for NER or token classification."
        },
        {
            "name": "pad_to_multiple_of",
            "type": "int",
            "optional": true,
            "default": "",
            "description": "If set will pad the sequence to a multiple of the provided value. Requires padding to be activated.This is especially useful to enable the use of Tensor Cores on NVIDIA hardware with compute capability>= 7.5 (Volta)."
        },
        {
            "name": "padding_side",
            "type": "str",
            "optional": true,
            "default": "",
            "description": "The side on which the model should have padding applied. Should be selected between [right, left].Default value is picked from the class attribute of the same name."
        },
        {
            "name": "return_tensors",
            "type": "str,TensorType",
            "optional": true,
            "default": "",
            "description": "If set, will return tensors instead of list of python integers. Acceptable values are:tf: Return TensorFlow tf.constant objects.pt: Return PyTorch torch.Tensor objects.np: Return Numpy np.ndarray objects."
        },
        {
            "name": "add_special_tokens",
            "type": "bool",
            "optional": true,
            "default": "",
            "description": "Whether or not to encode the sequences with the special tokens relative to their model."
        },
        {
            "name": "padding",
            "type": "bool, str,PaddingStrategy",
            "optional": true,
            "default": "",
            "description": "Activates and controls padding. Accepts the following values:True or longest: Pad to the longest sequence in the batch (or no padding if only a singlesequence if provided).max_length: Pad to a maximum length specified with the argument max_length or to the maximumacceptable input length for the model if that argument is not provided.False or do_not_pad (default): No padding (i.e., can output a batch with sequences of differentlengths)."
        },
        {
            "name": "truncation",
            "type": "bool, str, TapexTruncationStrategy,TruncationStrategy,",
            "optional": false,
            "default": "",
            "description": "optional, defaults to False):Activates and controls truncation. Accepts the following values:drop_rows_to_fit: Truncate to a maximum length specified with the argument max_length or to themaximum acceptable input length for the model if that argument is not provided. This will truncaterow by row, removing rows from the table.True or longest_first: Truncate to a maximum length specified with the argument max_length orto the maximum acceptable input length for the model if that argument is not provided. This willtruncate token by token, removing a token from the longest sequence in the pair if a pair ofsequences (or a batch of pairs) is provided.only_first: Truncate to a maximum length specified with the argument max_length or to themaximum acceptable input length for the model if that argument is not provided. This will onlytruncate the first sequence of a pair if a pair of sequences (or a batch of pairs) is provided.only_second: Truncate to a maximum length specified with the argument max_length or to themaximum acceptable input length for the model if that argument is not provided. This will onlytruncate the second sequence of a pair if a pair of sequences (or a batch of pairs) is provided.False or do_not_truncate (default): No truncation (i.e., can output batch with sequence lengthsgreater than the model maximum admissible input size)."
        },
        {
            "name": "max_length",
            "type": "int",
            "optional": true,
            "default": "",
            "description": "Controls the maximum length to use by one of the truncation/padding parameters. If left unset or set toNone, this will use the predefined model maximum length if a maximum length is required by one of thetruncation/padding parameters. If the model has no specific maximum input length (like XLNet)truncation/padding to a maximum length will be deactivated."
        },
        {
            "name": "stride",
            "type": "int",
            "optional": true,
            "default": "",
            "description": "If set to a number along with max_length, the overflowing tokens returned whenreturn_overflowing_tokens=True will contain some tokens from the end of the truncated sequencereturned to provide some overlap between truncated and overflowing sequences. The value of thisargument defines the number of overlapping tokens."
        },
        {
            "name": "pad_to_multiple_of",
            "type": "int",
            "optional": true,
            "default": "",
            "description": "If set will pad the sequence to a multiple of the provided value. This is especially useful to enablethe use of Tensor Cores on NVIDIA hardware with compute capability >= 7.5 (Volta)."
        },
        {
            "name": "return_tensors",
            "type": "str,TensorType",
            "optional": true,
            "default": "",
            "description": "If set, will return tensors instead of list of python integers. Acceptable values are:tf: Return TensorFlow tf.constant objects.pt: Return PyTorch torch.Tensor objects.np: Return Numpy np.ndarray objects."
        }
    ],
    "return": ""
}