{
    "api": "transformers.MoonshineConfig",
    "type": "class",
    "version": "main",
    "args_list": [
        "vocab_size",
        "hidden_size",
        "intermediate_size",
        "encoder_num_hidden_layers",
        "decoder_num_hidden_layers",
        "encoder_num_attention_heads",
        "decoder_num_attention_heads",
        "encoder_num_key_value_heads",
        "decoder_num_key_value_heads",
        "pad_head_dim_to_multiple_of",
        "encoder_hidden_act",
        "decoder_hidden_act",
        "max_position_embeddings",
        "initializer_range",
        "decoder_start_token_id",
        "use_cache",
        "rope_theta",
        "rope_scaling",
        "partial_rotary_factor",
        "is_encoder_decoder",
        "attention_bias",
        "attention_dropout",
        "bos_token_id",
        "eos_token_id",
        "**kwargs"
    ],
    "params": [
        {
            "name": "vocab_size",
            "type": "int",
            "optional": true,
            "default": "32768",
            "description": "Vocabulary size of the Moonshine model. Defines the number of different tokens that can be represented by theinputs_ids passed when calling MoonshineModel."
        },
        {
            "name": "hidden_size",
            "type": "int",
            "optional": true,
            "default": "288",
            "description": "Dimension of the hidden representations."
        },
        {
            "name": "intermediate_size",
            "type": "int",
            "optional": true,
            "default": "1152",
            "description": "Dimension of the MLP representations."
        },
        {
            "name": "encoder_num_hidden_layers",
            "type": "int",
            "optional": true,
            "default": "6",
            "description": "Number of hidden layers in the Transformer encoder."
        },
        {
            "name": "decoder_num_hidden_layers",
            "type": "int",
            "optional": true,
            "default": "6",
            "description": "Number of hidden layers in the Transformer decoder."
        },
        {
            "name": "encoder_num_attention_heads",
            "type": "int",
            "optional": true,
            "default": "8",
            "description": "Number of attention heads for each attention layer in the Transformer encoder."
        },
        {
            "name": "decoder_num_attention_heads",
            "type": "int",
            "optional": true,
            "default": "8",
            "description": "Number of attention heads for each attention layer in the Transformer decoder."
        },
        {
            "name": "encoder_num_key_value_heads",
            "type": "int",
            "optional": true,
            "default": "None",
            "description": "This is the number of key_value heads that should be used to implement Grouped Query Attention. Ifencoder_num_key_value_heads=encoder_num_attention_heads, the model will use Multi Head Attention (MHA), ifencoder_num_key_value_heads=1 the model will use Multi Query Attention (MQA) otherwise GQA is used. Whenconverting a multi-head checkpoint to a GQA checkpoint, each group key and value head should be constructedby meanpooling all the original heads within that group. For more details checkout thispaper. If it is not specified, will default tonum_attention_heads."
        },
        {
            "name": "decoder_num_key_value_heads",
            "type": "int",
            "optional": true,
            "default": "None",
            "description": "This is the number of key_value heads that should be used to implement Grouped Query Attention. Ifdecoder_num_key_value_heads=decoder_num_attention_heads, the model will use Multi Head Attention (MHA), ifdecoder_num_key_value_heads=1 the model will use Multi Query Attention (MQA) otherwise GQA is used. Whenconverting a multi-head checkpoint to a GQA checkpoint, each group key and value head should be constructedby meanpooling all the original heads within that group. For more details checkout thispaper. If it is not specified, will default todecoder_num_attention_heads."
        },
        {
            "name": "pad_head_dim_to_multiple_of",
            "type": "int",
            "optional": true,
            "default": "None",
            "description": "Pad head dimension in encoder and decoder to the next multiple of this value. Necessary for using certainoptimized attention implementations."
        },
        {
            "name": "encoder_hidden_act",
            "type": "str,function",
            "optional": true,
            "default": "gelu",
            "description": "The non-linear activation function (function or string) in the encoder."
        },
        {
            "name": "decoder_hidden_act",
            "type": "str,function",
            "optional": true,
            "default": "silu",
            "description": "The non-linear activation function (function or string) in the decoder."
        },
        {
            "name": "max_position_embeddings",
            "type": "int",
            "optional": true,
            "default": "512",
            "description": "The maximum sequence length that this model might ever be used with."
        },
        {
            "name": "initializer_range",
            "type": "float",
            "optional": true,
            "default": "0.02",
            "description": "The standard deviation of the truncated_normal_initializer for initializing all weight matrices."
        },
        {
            "name": "decoder_start_token_id",
            "type": "int",
            "optional": true,
            "default": "1",
            "description": "Corresponds to the <|startoftranscript|> token, which is automatically used when no decoder_input_idsare provided to the generate function. It is used to guide the model`s generation process depending onthe task."
        },
        {
            "name": "use_cache",
            "type": "bool",
            "optional": true,
            "default": "True",
            "description": "Whether or not the model should return the last key/values attentions (not used by all models)."
        },
        {
            "name": "rope_theta",
            "type": "float",
            "optional": true,
            "default": "10000.0",
            "description": "The base period of the RoPE embeddings."
        },
        {
            "name": "rope_scaling",
            "type": "Dict",
            "optional": true,
            "default": "None",
            "description": "Dictionary containing the scaling configuration for the RoPE embeddings. NOTE: if you apply new rope typeand you expect the model to work on longer max_position_embeddings, we recommend you to update this valueaccordingly.Expected contents:rope_type (str):The sub-variant of RoPE to use. Can be one of [default, linear, dynamic, yarn, longrope,llama3], with default being the original RoPE implementation.factor (float, optional):Used with all rope types except default. The scaling factor to apply to the RoPE embeddings. Inmost scaling types, a factor of x will enable the model to handle sequences of length x original maximum pre-trained length.original_max_position_embeddings (int, optional):Used with dynamic, longrope and llama3. The original max position embeddings used duringpretraining.attention_factor (float, optional):Used with yarn and longrope. The scaling factor to be applied on the attentioncomputation. If unspecified, it defaults to value recommended by the implementation, using thefactor field to infer the suggested value.beta_fast (float, optional):Only used with yarn. Parameter to set the boundary for extrapolation (only) in the linearramp function. If unspecified, it defaults to 32.beta_slow (float, optional):Only used with yarn. Parameter to set the boundary for interpolation (only) in the linearramp function. If unspecified, it defaults to 1.short_factor (List[float], optional):Only used with longrope. The scaling factor to be applied to short contexts (<original_max_position_embeddings). Must be a list of numbers with the same length as the hiddensize divided by the number of attention heads divided by 2long_factor (List[float], optional):Only used with longrope. The scaling factor to be applied to long contexts (<original_max_position_embeddings). Must be a list of numbers with the same length as the hiddensize divided by the number of attention heads divided by 2low_freq_factor (float, optional):Only used with llama3. Scaling factor applied to low frequency components of the RoPEhigh_freq_factor (float, optional*):Only used with llama3. Scaling factor applied to high frequency components of the RoPE"
        },
        {
            "name": "partial_rotary_factor",
            "type": "float",
            "optional": true,
            "default": "0.9",
            "description": "Percentage of the query and keys which will have rotary embedding."
        },
        {
            "name": "is_encoder_decoder",
            "type": "bool",
            "optional": true,
            "default": "True",
            "description": "Whether the model is used as an encoder/decoder or not."
        },
        {
            "name": "attention_bias",
            "type": "bool",
            "optional": true,
            "default": "False",
            "description": "Whether to use a bias in the query, key, value and output projection layers during self-attention."
        },
        {
            "name": "attention_dropout",
            "type": "float",
            "optional": true,
            "default": "0.0",
            "description": "The dropout ratio for the attention probabilities."
        },
        {
            "name": "bos_token_id",
            "type": "int",
            "optional": true,
            "default": "1",
            "description": "Denotes beginning of sequences token id."
        },
        {
            "name": "eos_token_id",
            "type": "int",
            "optional": true,
            "default": "2",
            "description": "Denotes end of sequences token id."
        }
    ],
    "return": ""
}