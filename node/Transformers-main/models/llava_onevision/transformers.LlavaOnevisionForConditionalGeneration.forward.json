{
    "api": "transformers.LlavaOnevisionForConditionalGeneration.forward",
    "type": "function",
    "version": "main",
    "args_list": [
        "input_ids:",
        "LongTensor",
        "pixel_values",
        "image_sizes",
        "pixel_values_videos",
        "image_sizes_videos",
        "attention_mask",
        "position_ids",
        "past_key_values",
        "inputs_embeds",
        "vision_feature_layer",
        "typing.List[int],",
        "NoneType]",
        "vision_feature_select_strategy",
        "vision_aspect_ratio",
        "labels",
        "use_cache",
        "output_attentions",
        "output_hidden_states",
        "return_dict",
        "cache_position",
        "logits_to_keep",
        "torch.Tensor]",
        "**lm_kwargs"
    ],
    "params": [
        {
            "name": "input_ids",
            "type": "torch.LongTensor of shape (batch_size, sequence_length)",
            "optional": false,
            "default": "",
            "description": "Indices of input sequence tokens in the vocabulary. Padding will be ignored by default should you provideit.Indices can be obtained using AutoTokenizer. See PreTrainedTokenizer.encode() andPreTrainedTokenizer.call() for details.What are input IDs?"
        },
        {
            "name": "pixel_values",
            "type": "torch.FloatTensor of shape `(batch_size, num_channels, image_size, image_size)",
            "optional": false,
            "default": "",
            "description": "The tensors corresponding to the input images. Pixel values can be obtained usingAutoImageProcessor. See LlavaNextImageProcessor.call() for details. LlavaProcessor usesLlavaNextImageProcessor for processing images."
        },
        {
            "name": "image_sizes",
            "type": "torch.LongTensor of shape (batch_size, 2",
            "optional": true,
            "default": "",
            "description": "The sizes of the images in the batch, being (height, width) for each image."
        },
        {
            "name": "pixel_values_videos",
            "type": "torch.FloatTensor of shape (batch_size, frames, num_channels, image_size, image_size)) -- The tensors corresponding to the input videos. Pixel values can be obtained using [LlavaNextVideoProcessor](/docs/transformers/main/en/model_doc/llava_next_video#transformers.LlavaNextVideoProcessor). See LlavaNextVideoProcessor.call()` for details. LlavaProcessor usesLlavaNextVideoProcessor for processing videos.",
            "optional": false,
            "default": "",
            "description": ""
        },
        {
            "name": "image_sizes_videos",
            "type": "torch.LongTensor of shape (batch_size, frames, 2",
            "optional": true,
            "default": "",
            "description": "The sizes of the videos in the batch, being (height, width) for each frame in the video."
        },
        {
            "name": "attention_mask",
            "type": "torch.Tensor of shape (batch_size, sequence_length",
            "optional": true,
            "default": "",
            "description": "Mask to avoid performing attention on padding token indices. Mask values selected in [0, 1]:1 for tokens that are not masked,0 for tokens that are masked.What are attention masks?Indices can be obtained using AutoTokenizer. See PreTrainedTokenizer.encode() andPreTrainedTokenizer.call() for details.If past_key_values is used, optionally only the last decoder_input_ids have to be input (seepast_key_values).If you want to change padding behavior, you should read modeling_opt._prepare_decoder_attention_maskand modify to your needs. See diagram 1 in the paper for moreinformation on the default strategy.1 indicates the head is not masked,0 indicates the head is masked."
        },
        {
            "name": "position_ids",
            "type": "torch.LongTensor of shape (batch_size, sequence_length",
            "optional": true,
            "default": "",
            "description": "Indices of positions of each input sequence tokens in the position embeddings. Selected in the range [0, config.n_positions - 1]. What are position IDs?"
        },
        {
            "name": "past_key_values",
            "type": "tuple(tuple(torch.FloatTensor)",
            "optional": true,
            "default": "",
            "description": "Tuple of tuple(torch.FloatTensor) of length config.n_layers, with each tuple having 2 tensors of shape(batch_size, num_heads, sequence_length, embed_size_per_head)) and 2 additional tensors of shape(batch_size, num_heads, encoder_sequence_length, embed_size_per_head).Contains pre-computed hidden-states (key and values in the self-attention blocks and in the cross-attentionblocks) that can be used (see past_key_values input) to speed up sequential decoding.If past_key_values are used, the user can optionally input only the last decoder_input_ids (those thatdont have their past key value states given to this model) of shape (batch_size, 1) instead of alldecoder_input_ids of shape (batch_size, sequence_length)."
        },
        {
            "name": "inputs_embeds",
            "type": "torch.FloatTensor of shape (batch_size, sequence_length, hidden_size",
            "optional": true,
            "default": "",
            "description": "Optionally, instead of passing input_ids you can choose to directly pass an embedded representation. Thisis useful if you want more control over how to convert input_ids indices into associated vectors than themodels internal embedding lookup matrix."
        },
        {
            "name": "vision_feature_layer",
            "type": "Union[int, List[int]], *optional*, defaults to -2",
            "optional": true,
            "default": "",
            "description": "The index of the layer to select the vision feature. If multiple indices are provided,the vision feature of the corresponding indices will be concatenated to form thevision features."
        },
        {
            "name": "vision_feature_select_strategy",
            "type": "str",
            "optional": true,
            "default": "",
            "description": "The feature selection strategy used to select the vision feature from the vision backbone.Can be one of default or full. If default, the CLS token is removed from the vision features.If full, the full vision features are used."
        },
        {
            "name": "vision_aspect_ratio",
            "type": "str",
            "optional": true,
            "default": "",
            "description": "Aspect ratio used when processong image features. The default value is anyres_max_9."
        },
        {
            "name": "use_cache",
            "type": "bool",
            "optional": true,
            "default": "",
            "description": "If set to True, past_key_values key value states are returned and can be used to speed up decoding (seepast_key_values)."
        },
        {
            "name": "output_attentions",
            "type": "bool",
            "optional": true,
            "default": "",
            "description": "Whether or not to return the attentions tensors of all attention layers. See attentions under returnedtensors for more detail."
        },
        {
            "name": "output_hidden_states",
            "type": "bool",
            "optional": true,
            "default": "",
            "description": "Whether or not to return the hidden states of all layers. See hidden_states under returned tensors formore detail."
        },
        {
            "name": "return_dict",
            "type": "bool",
            "optional": true,
            "default": "",
            "description": "Whether or not to return a ModelOutput instead of a plain tuple."
        },
        {
            "name": "cache_position",
            "type": "torch.LongTensor of shape (sequence_length",
            "optional": true,
            "default": "",
            "description": "Indices depicting the position of the input sequence tokens in the sequence. Contrarily to position_ids,this tensor is not affected by padding. It is used to update the cache in the correct position and to inferthe complete sequence length.labels (torch.LongTensor of shape (batch_size, sequence_length), optional):Labels for computing the masked language modeling loss. Indices should either be in [0, ..., config.vocab_size] or -100 (see input_ids docstring). Tokens with indices set to -100 are ignored(masked), the loss is only computed for the tokens with labels in [0, ..., config.vocab_size].logits_to_keep (int or torch.Tensor, optional):If an int, compute logits for the last logits_to_keep tokens. If 0, calculate logits for allinput_ids (special case). Only last token logits are needed for generation, and calculating them only for thattoken can save memory, which becomes pretty significant for long sequences or large vocabulary size.If a torch.Tensor, must be 1D corresponding to the indices to keep in the sequence length dimension.This is useful when using packed tensor format (single dimension for batch and sequence length)."
        }
    ],
    "return": ""
}