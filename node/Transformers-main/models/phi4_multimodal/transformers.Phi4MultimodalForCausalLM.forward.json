{
    "api": "transformers.Phi4MultimodalForCausalLM.forward",
    "type": "function",
    "version": "main",
    "args_list": [
        "input_ids:",
        "LongTensor",
        "attention_mask",
        "position_ids",
        "past_key_values",
        "inputs_embeds",
        "image_pixel_values",
        "image_sizes",
        "image_attention_mask",
        "audio_input_features",
        "audio_embed_sizes",
        "audio_attention_mask",
        "labels",
        "use_cache",
        "output_attentions",
        "output_hidden_states",
        "cache_position",
        "logits_to_keep",
        "torch.Tensor]",
        "**kwargs",
        ")"
    ],
    "params": [
        {
            "name": "input_ids",
            "type": "torch.LongTensor of shape (batch_size, sequence_length)",
            "optional": false,
            "default": "",
            "description": "Indices of input sequence tokens in the vocabulary. Padding will be ignored by default should you provideit.Indices can be obtained using AutoTokenizer. See PreTrainedTokenizer.encode() andPreTrainedTokenizer.call() for details.What are input IDs?"
        },
        {
            "name": "attention_mask",
            "type": "torch.Tensor of shape (batch_size, sequence_length",
            "optional": true,
            "default": "",
            "description": "Mask to avoid performing attention on padding indices in input_values. Mask values selected in [0, 1]:1 for tokens that are not masked,0 for tokens that are masked.What are attention masks?"
        },
        {
            "name": "position_ids",
            "type": "torch.LongTensor of shape (batch_size, sequence_length",
            "optional": true,
            "default": "",
            "description": "Indices of positions of each input sequence tokens in the position embeddings. Selected in the range [0, config.n_positions - 1].What are position IDs?"
        },
        {
            "name": "past_key_values",
            "type": "Cache), *optional*) -- Pre-computed hidden-states (key and values in the self-attention blocks and in the cross-attention blocks) that can be used to speed up sequential decoding. This typically consists in the past_key_valuesreturned by the model at a previous stage of decoding, whenuse_cache=Trueorconfig.use_cache=True`.See our kv cache guide;If past_key_values are used, the user can optionally input only the last input_ids (those that donâ€™thave their past key value states given to this model) of shape (batch_size, 1) instead of all input_idsof shape (batch_size, sequence_length).",
            "optional": true,
            "default": "",
            "description": ""
        },
        {
            "name": "inputs_embeds",
            "type": "torch.FloatTensor of shape (batch_size, sequence_length, hidden_size",
            "optional": true,
            "default": "",
            "description": "Optionally, instead of passing input_ids you can choose to directly pass an embedded representation. Thisis useful if you want more control over how to convert input_ids indices into associated vectors than themodels internal embedding lookup matrix."
        },
        {
            "name": "image_pixel_values",
            "type": "torch.FloatTensor",
            "optional": true,
            "default": "",
            "description": "If the input contains images, these correspond to the pixel values after transformations (as returned bythe Processor)"
        },
        {
            "name": "image_sizes",
            "type": "torch.LongTensor",
            "optional": true,
            "default": "",
            "description": "If the input contains images, these correspond to size of each image."
        },
        {
            "name": "image_attention_mask",
            "type": "torch.LongTensor",
            "optional": true,
            "default": "None",
            "description": "Attention mask for the images."
        },
        {
            "name": "audio_input_features",
            "type": "torch.FloatTensor",
            "optional": true,
            "default": "",
            "description": "If the input contains audio samples, these correspond to the values after transformation (as returned bythe Processor)."
        },
        {
            "name": "audio_embed_sizes",
            "type": "torch.Tensor",
            "optional": true,
            "default": "None",
            "description": "Size of the audio inputs."
        },
        {
            "name": "audio_attention_mask",
            "type": "`torch.Tensor",
            "optional": true,
            "default": "None",
            "description": "Attention mask for the audio inputs."
        },
        {
            "name": "use_cache",
            "type": "bool",
            "optional": true,
            "default": "",
            "description": "If set to True, past_key_values key value states are returned and can be used to speed up decoding (seepast_key_values)."
        },
        {
            "name": "output_attentions",
            "type": "bool",
            "optional": true,
            "default": "",
            "description": "Whether or not to return the attentions tensors of all attention layers. See attentions under returnedtensors for more detail."
        },
        {
            "name": "output_hidden_states",
            "type": "bool",
            "optional": true,
            "default": "",
            "description": "Whether or not to return the hidden states of all layers. See hidden_states under returned tensors formore detail."
        },
        {
            "name": "return_dict",
            "type": "bool",
            "optional": true,
            "default": "",
            "description": "Whether or not to return a ModelOutput instead of a plain tuple."
        },
        {
            "name": "cache_position",
            "type": "torch.LongTensor of shape (sequence_length",
            "optional": true,
            "default": "",
            "description": "Indices depicting the position of the input sequence tokens in the sequence. Contrarily to position_ids,this tensor is not affected by padding. It is used to update the cache in the correct position and to inferthe complete sequence length."
        },
        {
            "name": "labels",
            "type": "torch.LongTensor of shape (batch_size, sequence_length",
            "optional": true,
            "default": "",
            "description": "Labels for computing the masked language modeling loss. Indices should either be in [0, ..., config.vocab_size] or -100 (see input_ids docstring). Tokens with indices set to -100 are ignored(masked), the loss is only computed for the tokens with labels in [0, ..., config.vocab_size]."
        },
        {
            "name": "logits_to_keep",
            "type": "int,torch.Tensor",
            "optional": true,
            "default": "",
            "description": "If an int, compute logits for the last logits_to_keep tokens. If 0, calculate logits for allinput_ids (special case). Only last token logits are needed for generation, and calculating them only for thattoken can save memory, which becomes pretty significant for long sequences or large vocabulary size.If a torch.Tensor, must be 1D corresponding to the indices to keep in the sequence length dimension.This is useful when using packed tensor format (single dimension for batch and sequence length)."
        }
    ],
    "return": "transformers.modeling_outputs.CausalLMOutputWithPast or tuple(torch.FloatTensor)"
}