{
    "api": "transformers.models.canine.modeling_canine.CanineModelOutputWithPooling",
    "type": "class",
    "version": "main",
    "args_list": [
        "last_hidden_state:",
        "pooler_output",
        "hidden_states",
        "attentions"
    ],
    "params": [
        {
            "name": "last_hidden_state",
            "type": "torch.FloatTensor of shape (batch_size, sequence_length, hidden_size)",
            "optional": false,
            "default": "",
            "description": "Sequence of hidden-states at the output of the last layer of the model (i.e. the output of the finalshallow Transformer encoder)."
        },
        {
            "name": "pooler_output",
            "type": "torch.FloatTensor of shape (batch_size, hidden_size)",
            "optional": false,
            "default": "",
            "description": "Hidden-state of the first token of the sequence (classification token) at the last layer of the deepTransformer encoder, further processed by a Linear layer and a Tanh activation function. The Linear layerweights are trained from the next sentence prediction (classification) objective during pretraining."
        },
        {
            "name": "hidden_states",
            "type": "tuple(torch.FloatTensor",
            "optional": true,
            "default": "",
            "description": "Tuple of torch.FloatTensor (one for the input to each encoder + one for the output of each layer of eachencoder) of shape (batch_size, sequence_length, hidden_size) and (batch_size, sequence_length // config.downsampling_rate, hidden_size). Hidden-states of the model at the output of each layer plus theinitial input to each Transformer encoder. The hidden states of the shallow encoders have lengthsequence_length, but the hidden states of the deep encoder have length sequence_length //config.downsampling_rate."
        },
        {
            "name": "attentions",
            "type": "tuple(torch.FloatTensor",
            "optional": true,
            "default": "",
            "description": "Tuple of torch.FloatTensor (one for each layer) of the 3 Transformer encoders of shape (batch_size, num_heads, sequence_length, sequence_length) and (batch_size, num_heads, sequence_length // config.downsampling_rate, sequence_length // config.downsampling_rate). Attentions weights after theattention softmax, used to compute the weighted average in the self-attention heads."
        }
    ],
    "return": ""
}