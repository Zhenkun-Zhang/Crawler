{
    "api": "transformers.VisionEncoderDecoderModel.from_encoder_decoder_pretrained",
    "type": "function",
    "version": "main",
    "args_list": [
        "encoder_pretrained_model_name_or_path:",
        "decoder_pretrained_model_name_or_path",
        "*model_args",
        "**kwargs"
    ],
    "params": [
        {
            "name": "encoder_pretrained_model_name_or_path",
            "type": "str",
            "optional": true,
            "default": "",
            "description": "Information necessary to initiate the image encoder. Can be either:A string, the model id of a pretrained model hosted inside a model repo on huggingface.co. Anexample is google/vit-base-patch16-224-in21k.A path to a directory containing model weights saved usingsave_pretrained(), e.g., ./my_model_directory/.A path or url to a tensorflow index checkpoint file (e.g, ./tf_model/model.ckpt.index). Inthis case, from_tf should be set to True and a configuration object should be provided asconfig argument. This loading path is slower than converting the TensorFlow checkpoint in aPyTorch model using the provided conversion scripts and loading the PyTorch model afterwards."
        },
        {
            "name": "decoder_pretrained_model_name_or_path",
            "type": "str",
            "optional": true,
            "default": "",
            "description": "Information necessary to initiate the text decoder. Can be either:A string, the model id of a pretrained model hosted inside a model repo on huggingface.co.A path to a directory containing model weights saved usingsave_pretrained(), e.g., ./my_model_directory/.A path or url to a tensorflow index checkpoint file (e.g, ./tf_model/model.ckpt.index). Inthis case, from_tf should be set to True and a configuration object should be provided asconfig argument. This loading path is slower than converting the TensorFlow checkpoint in aPyTorch model using the provided conversion scripts and loading the PyTorch model afterwards."
        },
        {
            "name": "model_args",
            "type": "remaining positional arguments",
            "optional": true,
            "default": "",
            "description": "All remaning positional arguments will be passed to the underlying models __init__ method."
        },
        {
            "name": "kwargs",
            "type": "remaining dictionary of keyword arguments",
            "optional": true,
            "default": "",
            "description": "Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,output_attentions=True).To update the encoder configuration, use the prefix encoder_ for each configuration parameter.To update the decoder configuration, use the prefix decoder_ for each configuration parameter.To update the parent model configuration, do not use a prefix for each configuration parameter.Behaves differently depending on whether a config is provided or automatically loaded."
        }
    ],
    "return": ""
}