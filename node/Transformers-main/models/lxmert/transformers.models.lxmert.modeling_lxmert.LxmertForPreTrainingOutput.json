{
    "api": "transformers.models.lxmert.modeling_lxmert.LxmertForPreTrainingOutput",
    "type": "class",
    "version": "main",
    "args_list": [
        "loss:",
        "prediction_logits",
        "cross_relationship_score",
        "question_answering_score",
        "language_hidden_states",
        "vision_hidden_states",
        "language_attentions",
        "vision_attentions",
        "cross_encoder_attentions"
    ],
    "params": [
        {
            "name": "loss",
            "type": "optional, returned when labels is provided, torch.FloatTensor of shape (1,)",
            "optional": true,
            "default": "",
            "description": "Total loss as the sum of the masked language modeling loss and the next sequence prediction(classification) loss."
        },
        {
            "name": "prediction_logits",
            "type": "torch.FloatTensor of shape (batch_size, sequence_length, config.vocab_size)",
            "optional": false,
            "default": "",
            "description": "Prediction scores of the language modeling head (scores for each vocabulary token before SoftMax)."
        },
        {
            "name": "cross_relationship_score",
            "type": "torch.FloatTensor of shape (batch_size, 2)",
            "optional": false,
            "default": "",
            "description": "Prediction scores of the textual matching objective (classification) head (scores of True/Falsecontinuation before SoftMax)."
        },
        {
            "name": "question_answering_score",
            "type": "torch.FloatTensor of shape (batch_size, n_qa_answers)",
            "optional": false,
            "default": "",
            "description": "Prediction scores of question answering objective (classification)."
        },
        {
            "name": "language_hidden_states",
            "type": "tuple(torch.FloatTensor",
            "optional": true,
            "default": "",
            "description": "Tuple of torch.FloatTensor (one for input features + one for the output of each cross-modality layer) ofshape (batch_size, sequence_length, hidden_size)."
        },
        {
            "name": "vision_hidden_states",
            "type": "tuple(torch.FloatTensor",
            "optional": true,
            "default": "",
            "description": "Tuple of torch.FloatTensor (one for input features + one for the output of each cross-modality layer) ofshape (batch_size, sequence_length, hidden_size)."
        },
        {
            "name": "language_attentions",
            "type": "tuple(torch.FloatTensor",
            "optional": true,
            "default": "",
            "description": "Tuple of torch.FloatTensor (one for each layer) of shape (batch_size, num_heads, sequence_length, sequence_length). Attentions weights after the attention softmax, used to compute the weighted average inthe self-attention heads."
        },
        {
            "name": "vision_attentions",
            "type": "tuple(torch.FloatTensor",
            "optional": true,
            "default": "",
            "description": "Tuple of torch.FloatTensor (one for each layer) of shape (batch_size, num_heads, sequence_length, sequence_length). Attentions weights after the attention softmax, used to compute the weighted average inthe self-attention heads."
        },
        {
            "name": "cross_encoder_attentions",
            "type": "tuple(torch.FloatTensor",
            "optional": true,
            "default": "",
            "description": "Tuple of torch.FloatTensor (one for each layer) of shape (batch_size, num_heads, sequence_length, sequence_length). Attentions weights after the attention softmax, used to compute the weighted average inthe self-attention heads."
        }
    ],
    "return": ""
}