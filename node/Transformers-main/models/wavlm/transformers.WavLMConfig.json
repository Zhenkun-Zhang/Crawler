{
    "api": "transformers.WavLMConfig",
    "type": "class",
    "version": "main",
    "args_list": [
        "vocab_size",
        "hidden_size",
        "num_hidden_layers",
        "num_attention_heads",
        "intermediate_size",
        "hidden_act",
        "hidden_dropout",
        "activation_dropout",
        "attention_dropout",
        "feat_proj_dropout",
        "final_dropout",
        "layerdrop",
        "initializer_range",
        "layer_norm_eps",
        "feat_extract_norm",
        "feat_extract_activation",
        "conv_dim",
        "512,",
        "512,",
        "512,",
        "512,",
        "512,",
        "512)",
        "conv_stride",
        "2,",
        "2,",
        "2,",
        "2,",
        "2,",
        "2)",
        "conv_kernel",
        "3,",
        "3,",
        "3,",
        "3,",
        "2,",
        "2)",
        "conv_bias",
        "num_conv_pos_embeddings",
        "num_conv_pos_embedding_groups",
        "num_buckets",
        "max_bucket_distance",
        "do_stable_layer_norm",
        "apply_spec_augment",
        "mask_time_prob",
        "mask_time_length",
        "mask_time_min_masks",
        "mask_feature_prob",
        "mask_feature_length",
        "num_codevectors_per_group",
        "num_codevector_groups",
        "contrastive_logits_temperature",
        "num_negatives",
        "codevector_dim",
        "proj_codevector_dim",
        "diversity_loss_weight",
        "ctc_loss_reduction",
        "ctc_zero_infinity",
        "use_weighted_layer_sum",
        "classifier_proj_size",
        "tdnn_dim",
        "512,",
        "512,",
        "512,",
        "1500)",
        "tdnn_kernel",
        "3,",
        "3,",
        "1,",
        "1)",
        "tdnn_dilation",
        "2,",
        "3,",
        "1,",
        "1)",
        "xvector_output_dim",
        "num_ctc_classes",
        "pad_token_id",
        "bos_token_id",
        "eos_token_id",
        "add_adapter",
        "adapter_kernel_size",
        "adapter_stride",
        "num_adapter_layers",
        "output_hidden_size",
        "**kwargs"
    ],
    "params": [
        {
            "name": "vocab_size",
            "type": "int",
            "optional": true,
            "default": "32",
            "description": "Vocabulary size of the WavLM model. Defines the number of different tokens that can be represented by theinputs_ids passed when calling WavLMModel. Vocabulary size of the model. Defines the different tokensthat can be represented by the inputs_ids passed to the forward method of WavLMModel."
        },
        {
            "name": "hidden_size",
            "type": "int",
            "optional": true,
            "default": "768",
            "description": "Dimensionality of the encoder layers and the pooler layer."
        },
        {
            "name": "num_hidden_layers",
            "type": "int",
            "optional": true,
            "default": "12",
            "description": "Number of hidden layers in the Transformer encoder."
        },
        {
            "name": "num_attention_heads",
            "type": "int",
            "optional": true,
            "default": "12",
            "description": "Number of attention heads for each attention layer in the Transformer encoder."
        },
        {
            "name": "intermediate_size",
            "type": "int",
            "optional": true,
            "default": "3072",
            "description": "Dimensionality of the intermediate (i.e., feed-forward) layer in the Transformer encoder."
        },
        {
            "name": "hidden_act",
            "type": "str,function",
            "optional": true,
            "default": "gelu",
            "description": "The non-linear activation function (function or string) in the encoder and pooler. If string, gelu,relu, selu and gelu_new are supported."
        },
        {
            "name": "hidden_dropout",
            "type": "float",
            "optional": true,
            "default": "0.1",
            "description": "The dropout probability for all fully connected layers in the embeddings, encoder, and pooler."
        },
        {
            "name": "activation_dropout",
            "type": "float",
            "optional": true,
            "default": "0.1",
            "description": "The dropout ratio for activations inside the fully connected layer."
        },
        {
            "name": "attention_dropout",
            "type": "float",
            "optional": true,
            "default": "0.1",
            "description": "The dropout ratio for the attention probabilities."
        },
        {
            "name": "final_dropout",
            "type": "float",
            "optional": true,
            "default": "0.1",
            "description": "The dropout probability for the final projection layer of WavLMForCTC."
        },
        {
            "name": "layerdrop",
            "type": "float",
            "optional": true,
            "default": "0.1",
            "description": "The LayerDrop probability. See the [LayerDrop paper](see https://arxiv.org/abs/1909.11556) for moredetails."
        },
        {
            "name": "initializer_range",
            "type": "float",
            "optional": true,
            "default": "0.02",
            "description": "The standard deviation of the truncated_normal_initializer for initializing all weight matrices."
        },
        {
            "name": "layer_norm_eps",
            "type": "float",
            "optional": true,
            "default": "1e-05",
            "description": "The epsilon used by the layer normalization layers."
        },
        {
            "name": "feat_extract_norm",
            "type": "str",
            "optional": true,
            "default": "group",
            "description": "The norm to be applied to 1D convolutional layers in feature encoder. One of group for groupnormalization of only the first 1D convolutional layer or layer for layer normalization of all 1Dconvolutional layers."
        },
        {
            "name": "feat_proj_dropout",
            "type": "float",
            "optional": true,
            "default": "0.0",
            "description": "The dropout probability for output of the feature encoder."
        },
        {
            "name": "feat_extract_activation",
            "type": "str",
            "optional": true,
            "default": "gelu",
            "description": ""
        },
        {
            "name": "conv_dim",
            "type": "Tuple[int],List[int]",
            "optional": true,
            "default": "(512,",
            "description": "A tuple of integers defining the number of input and output channels of each 1D convolutional layer in thefeature encoder. The length of conv_dim defines the number of 1D convolutional layers."
        },
        {
            "name": "conv_stride",
            "type": "Tuple[int],List[int]",
            "optional": true,
            "default": "(5,",
            "description": "A tuple of integers defining the stride of each 1D convolutional layer in the feature encoder. The lengthof conv_stride defines the number of convolutional layers and has to match the length of conv_dim."
        },
        {
            "name": "conv_kernel",
            "type": "Tuple[int],List[int]",
            "optional": true,
            "default": "(10,",
            "description": "A tuple of integers defining the kernel size of each 1D convolutional layer in the feature encoder. Thelength of conv_kernel defines the number of convolutional layers and has to match the length ofconv_dim."
        },
        {
            "name": "conv_bias",
            "type": "bool",
            "optional": true,
            "default": "False",
            "description": "Whether the 1D convolutional layers have a bias."
        },
        {
            "name": "num_conv_pos_embeddings",
            "type": "int",
            "optional": true,
            "default": "128",
            "description": "Number of convolutional positional embeddings. Defines the kernel size of 1D convolutional positionalembeddings layer."
        },
        {
            "name": "num_conv_pos_embedding_groups",
            "type": "int",
            "optional": true,
            "default": "16",
            "description": "Number of groups of 1D convolutional positional embeddings layer."
        },
        {
            "name": "do_stable_layer_norm",
            "type": "bool",
            "optional": true,
            "default": "False",
            "description": "Whether to apply stable layer norm architecture of the Transformer encoder. do_stable_layer_norm is True corresponds to applying layer norm before the attention layer, whereas do_stable_layer_norm is False corresponds to applying layer norm after the attention layer."
        },
        {
            "name": "apply_spec_augment",
            "type": "bool",
            "optional": true,
            "default": "True",
            "description": "Whether to apply SpecAugment data augmentation to the outputs of the feature encoder. For reference seeSpecAugment: A Simple Data Augmentation Method for Automatic SpeechRecognition."
        },
        {
            "name": "mask_time_prob",
            "type": "float",
            "optional": true,
            "default": "0.05",
            "description": "Propability of each feature vector along the time axis to be chosen as the start of the vector span to bemasked. Approximately mask_time_prob * sequence_length // mask_time_length feature vectors will be maskedalong the time axis. This is only relevant if apply_spec_augment is True."
        },
        {
            "name": "mask_time_length",
            "type": "int",
            "optional": true,
            "default": "10",
            "description": "Length of vector span along the time axis."
        },
        {
            "name": "mask_time_min_masks",
            "type": "int",
            "optional": true,
            "default": "2",
            "description": "The minimum number of masks of length mask_feature_length generated along the time axis, each time step,irrespectively of mask_feature_prob. Only relevant if mask_time_prob*len(time_axis)/mask_time_length <mask_time_min_masks"
        },
        {
            "name": "mask_feature_prob",
            "type": "float",
            "optional": true,
            "default": "0.0",
            "description": "Propability of each feature vector along the feature axis to be chosen as the start of the vector span tobe masked. Approximately mask_time_prob * hidden_size // mask_time_length feature vectors will be maskedalong the time axis. This is only relevant if apply_spec_augment is True."
        },
        {
            "name": "mask_feature_length",
            "type": "int",
            "optional": true,
            "default": "10",
            "description": "Length of vector span along the feature axis."
        },
        {
            "name": "num_codevectors_per_group",
            "type": "int",
            "optional": true,
            "default": "320",
            "description": "Number of entries in each quantization codebook (group)."
        },
        {
            "name": "num_codevector_groups",
            "type": "int",
            "optional": true,
            "default": "2",
            "description": "Number of codevector groups for product codevector quantization."
        },
        {
            "name": "contrastive_logits_temperature",
            "type": "float",
            "optional": true,
            "default": "0.1",
            "description": "The temperature kappa in the contrastive loss."
        },
        {
            "name": "num_negatives",
            "type": "int",
            "optional": true,
            "default": "100",
            "description": "Number of negative samples for the contrastive loss."
        },
        {
            "name": "codevector_dim",
            "type": "int",
            "optional": true,
            "default": "256",
            "description": "Dimensionality of the quantized feature vectors."
        },
        {
            "name": "proj_codevector_dim",
            "type": "int",
            "optional": true,
            "default": "256",
            "description": "Dimensionality of the final projection of both the quantized and the transformer features."
        },
        {
            "name": "diversity_loss_weight",
            "type": "int",
            "optional": true,
            "default": "0.1",
            "description": "The weight of the codebook diversity loss component."
        },
        {
            "name": "ctc_loss_reduction",
            "type": "str",
            "optional": true,
            "default": "mean",
            "description": "Specifies the reduction to apply to the output of torch.nn.CTCLoss. Only relevant when training aninstance of WavLMForCTC."
        },
        {
            "name": "ctc_zero_infinity",
            "type": "bool",
            "optional": true,
            "default": "False",
            "description": "Whether to zero infinite losses and the associated gradients of torch.nn.CTCLoss. Infinite losses mainlyoccur when the inputs are too short to be aligned to the targets. Only relevant when training an instanceof WavLMForCTC."
        },
        {
            "name": "use_weighted_layer_sum",
            "type": "bool",
            "optional": true,
            "default": "False",
            "description": "Whether to use a weighted average of layer outputs with learned weights. Only relevant when using aninstance of WavLMForSequenceClassification."
        },
        {
            "name": "classifier_proj_size",
            "type": "int",
            "optional": true,
            "default": "256",
            "description": "Dimensionality of the projection before token mean-pooling for classification."
        },
        {
            "name": "tdnn_dim",
            "type": "Tuple[int],List[int]",
            "optional": true,
            "default": "(512,",
            "description": "A tuple of integers defining the number of output channels of each 1D convolutional layer in the TDNNmodule of the XVector model. The length of tdnn_dim defines the number of TDNN layers."
        },
        {
            "name": "tdnn_kernel",
            "type": "Tuple[int],List[int]",
            "optional": true,
            "default": "(5,",
            "description": "A tuple of integers defining the kernel size of each 1D convolutional layer in the TDNN module of theXVector model. The length of tdnn_kernel has to match the length of tdnn_dim."
        },
        {
            "name": "tdnn_dilation",
            "type": "Tuple[int],List[int]",
            "optional": true,
            "default": "(1,",
            "description": "A tuple of integers defining the dilation factor of each 1D convolutional layer in TDNN module of theXVector model. The length of tdnn_dilation has to match the length of tdnn_dim."
        },
        {
            "name": "xvector_output_dim",
            "type": "int",
            "optional": true,
            "default": "512",
            "description": "Dimensionality of the XVector embedding vectors."
        },
        {
            "name": "add_adapter",
            "type": "bool",
            "optional": true,
            "default": "False",
            "description": "Whether a convolutional network should be stacked on top of the Wav2Vec2 Encoder. Can be very useful forwarm-starting Wav2Vec2 for SpeechEncoderDecoder models."
        },
        {
            "name": "adapter_kernel_size",
            "type": "int",
            "optional": true,
            "default": "3",
            "description": "Kernel size of the convolutional layers in the adapter network. Only relevant if add_adapter is True."
        },
        {
            "name": "adapter_stride",
            "type": "int",
            "optional": true,
            "default": "2",
            "description": "Stride of the convolutional layers in the adapter network. Only relevant if add_adapter is True."
        },
        {
            "name": "num_adapter_layers",
            "type": "int",
            "optional": true,
            "default": "3",
            "description": "Number of convolutional layers that should be used in the adapter network. Only relevant if add_adapter is True."
        },
        {
            "name": "output_hidden_size",
            "type": "int",
            "optional": true,
            "default": "None",
            "description": "Dimensionality of the encoder output layer. If not defined, this defaults to hidden-size. Only relevantif add_adapter is True."
        }
    ],
    "return": ""
}