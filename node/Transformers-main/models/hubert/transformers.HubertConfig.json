{
    "api": "transformers.HubertConfig",
    "type": "class",
    "version": "main",
    "args_list": [
        "vocab_size",
        "hidden_size",
        "num_hidden_layers",
        "num_attention_heads",
        "intermediate_size",
        "hidden_act",
        "hidden_dropout",
        "activation_dropout",
        "attention_dropout",
        "feat_proj_layer_norm",
        "feat_proj_dropout",
        "final_dropout",
        "layerdrop",
        "initializer_range",
        "layer_norm_eps",
        "feat_extract_norm",
        "feat_extract_activation",
        "conv_dim",
        "512,",
        "512,",
        "512,",
        "512,",
        "512,",
        "512)",
        "conv_stride",
        "2,",
        "2,",
        "2,",
        "2,",
        "2,",
        "2)",
        "conv_kernel",
        "3,",
        "3,",
        "3,",
        "3,",
        "2,",
        "2)",
        "conv_bias",
        "num_conv_pos_embeddings",
        "num_conv_pos_embedding_groups",
        "conv_pos_batch_norm",
        "do_stable_layer_norm",
        "apply_spec_augment",
        "mask_time_prob",
        "mask_time_length",
        "mask_time_min_masks",
        "mask_feature_prob",
        "mask_feature_length",
        "mask_feature_min_masks",
        "ctc_loss_reduction",
        "ctc_zero_infinity",
        "use_weighted_layer_sum",
        "classifier_proj_size",
        "pad_token_id",
        "bos_token_id",
        "eos_token_id",
        "**kwargs"
    ],
    "params": [
        {
            "name": "vocab_size",
            "type": "int",
            "optional": true,
            "default": "32",
            "description": "Vocabulary size of the Hubert model. Defines the number of different tokens that can be represented by theinputs_ids passed when calling HubertModel. Vocabulary size of the model. Defines the differenttokens that can be represented by the inputs_ids passed to the forward method of HubertModel."
        },
        {
            "name": "hidden_size",
            "type": "int",
            "optional": true,
            "default": "768",
            "description": "Dimensionality of the encoder layers and the pooler layer."
        },
        {
            "name": "num_hidden_layers",
            "type": "int",
            "optional": true,
            "default": "12",
            "description": "Number of hidden layers in the Transformer encoder."
        },
        {
            "name": "num_attention_heads",
            "type": "int",
            "optional": true,
            "default": "12",
            "description": "Number of attention heads for each attention layer in the Transformer encoder."
        },
        {
            "name": "intermediate_size",
            "type": "int",
            "optional": true,
            "default": "3072",
            "description": "Dimensionality of the intermediate (i.e., feed-forward) layer in the Transformer encoder."
        },
        {
            "name": "hidden_act",
            "type": "str,function",
            "optional": true,
            "default": "gelu",
            "description": "The non-linear activation function (function or string) in the encoder and pooler. If string, gelu,relu, selu and gelu_new are supported."
        },
        {
            "name": "hidden_dropout(float,",
            "type": "optional, defaults to 0.1",
            "optional": true,
            "default": "",
            "description": "The dropout probability for all fully connected layers in the embeddings, encoder, and pooler."
        },
        {
            "name": "activation_dropout",
            "type": "float",
            "optional": true,
            "default": "0.1",
            "description": "The dropout ratio for activations inside the fully connected layer."
        },
        {
            "name": "attention_dropout(float,",
            "type": "optional, defaults to 0.1",
            "optional": true,
            "default": "",
            "description": "The dropout ratio for the attention probabilities."
        },
        {
            "name": "final_dropout",
            "type": "float",
            "optional": true,
            "default": "0.1",
            "description": "The dropout probability for the final projection layer of Wav2Vec2ForCTC."
        },
        {
            "name": "layerdrop",
            "type": "float",
            "optional": true,
            "default": "0.1",
            "description": "The LayerDrop probability. See the [LayerDrop paper](see https://arxiv.org/abs/1909.11556) for moredetails."
        },
        {
            "name": "initializer_range",
            "type": "float",
            "optional": true,
            "default": "0.02",
            "description": "The standard deviation of the truncated_normal_initializer for initializing all weight matrices."
        },
        {
            "name": "layer_norm_eps",
            "type": "float",
            "optional": true,
            "default": "1e-05",
            "description": "The epsilon used by the layer normalization layers."
        },
        {
            "name": "feat_extract_norm",
            "type": "str",
            "optional": true,
            "default": "group",
            "description": "The norm to be applied to 1D convolutional layers in feature encoder. One of group for groupnormalization of only the first 1D convolutional layer or layer for layer normalization of all 1Dconvolutional layers."
        },
        {
            "name": "feat_proj_dropout",
            "type": "float",
            "optional": true,
            "default": "0.0",
            "description": "The dropout probability for output of the feature encoder."
        },
        {
            "name": "feat_proj_layer_norm",
            "type": "bool",
            "optional": true,
            "default": "True",
            "description": "Whether to apply LayerNorm to the output of the feature encoder."
        },
        {
            "name": "feat_extract_activation",
            "type": "str",
            "optional": true,
            "default": "gelu",
            "description": ""
        },
        {
            "name": "conv_dim",
            "type": "Tuple[int]",
            "optional": true,
            "default": "(512,",
            "description": "A tuple of integers defining the number of input and output channels of each 1D convolutional layer in thefeature encoder. The length of conv_dim defines the number of 1D convolutional layers."
        },
        {
            "name": "conv_stride",
            "type": "Tuple[int]",
            "optional": true,
            "default": "(5,",
            "description": "A tuple of integers defining the stride of each 1D convolutional layer in the feature encoder. The lengthof conv_stride defines the number of convolutional layers and has to match the length of conv_dim."
        },
        {
            "name": "conv_kernel",
            "type": "Tuple[int]",
            "optional": true,
            "default": "(10,",
            "description": "A tuple of integers defining the kernel size of each 1D convolutional layer in the feature encoder. Thelength of conv_kernel defines the number of convolutional layers and has to match the length ofconv_dim."
        },
        {
            "name": "conv_bias",
            "type": "bool",
            "optional": true,
            "default": "False",
            "description": "Whether the 1D convolutional layers have a bias."
        },
        {
            "name": "num_conv_pos_embeddings",
            "type": "int",
            "optional": true,
            "default": "128",
            "description": "Number of convolutional positional embeddings. Defines the kernel size of 1D convolutional positionalembeddings layer."
        },
        {
            "name": "num_conv_pos_embedding_groups",
            "type": "int",
            "optional": true,
            "default": "16",
            "description": "Number of groups of 1D convolutional positional embeddings layer."
        },
        {
            "name": "conv_pos_batch_norm",
            "type": "bool",
            "optional": true,
            "default": "False",
            "description": "Whether to use batch norm instead of weight norm in conv_pos"
        },
        {
            "name": "do_stable_layer_norm",
            "type": "bool",
            "optional": true,
            "default": "False",
            "description": "Whether do apply stable layer norm architecture of the Transformer encoder. do_stable_layer_norm is True corresponds to applying layer norm before the attention layer, whereas do_stable_layer_norm is False corresponds to applying layer norm after the attention layer."
        },
        {
            "name": "apply_spec_augment",
            "type": "bool",
            "optional": true,
            "default": "True",
            "description": "Whether to apply SpecAugment data augmentation to the outputs of the feature encoder. For reference seeSpecAugment: A Simple Data Augmentation Method for Automatic SpeechRecognition."
        },
        {
            "name": "mask_time_prob",
            "type": "float",
            "optional": true,
            "default": "0.05",
            "description": "Percentage (between 0 and 1) of all feature vectors along the time axis which will be masked. The maskingprocecure generates mask_time_problen(time_axis)/mask_time_length independent masks over the axis. Ifreasoning from the propability of each feature vector to be chosen as the start of the vector span to bemasked, mask_time_prob should be `prob_vector_startmask_time_length. Note that overlap may decrease the actual percentage of masked vectors. This is only relevant if apply_spec_augment is True`."
        },
        {
            "name": "mask_time_length",
            "type": "int",
            "optional": true,
            "default": "10",
            "description": "Length of vector span along the time axis."
        },
        {
            "name": "mask_time_min_masks",
            "type": "int",
            "optional": true,
            "default": "2",
            "description": "The minimum number of masks of length mask_feature_length generated along the time axis, each time step,irrespectively of mask_feature_prob. Only relevant if mask_time_prob*len(time_axis)/mask_time_length <mask_time_min_masks"
        },
        {
            "name": "mask_feature_prob",
            "type": "float",
            "optional": true,
            "default": "0.0",
            "description": "Percentage (between 0 and 1) of all feature vectors along the feature axis which will be masked. Themasking procecure generates mask_feature_problen(feature_axis)/mask_time_length independent masks overthe axis. If reasoning from the propability of each feature vector to be chosen as the start of the vectorspan to be masked, mask_feature_prob should be `prob_vector_startmask_feature_length. Note that overlap may decrease the actual percentage of masked vectors. This is only relevant if apply_spec_augment isTrue`."
        },
        {
            "name": "mask_feature_length",
            "type": "int",
            "optional": true,
            "default": "10",
            "description": "Length of vector span along the feature axis."
        },
        {
            "name": "mask_feature_min_masks",
            "type": "int",
            "optional": true,
            "default": "0",
            "description": "The minimum number of masks of length mask_feature_length generated along the feature axis, each timestep, irrespectively of mask_feature_prob. Only relevant ifmask_feature_prob*len(feature_axis)/mask_feature_length < mask_feature_min_masks"
        },
        {
            "name": "ctc_loss_reduction",
            "type": "str",
            "optional": true,
            "default": "sum",
            "description": "Specifies the reduction to apply to the output of torch.nn.CTCLoss. Only relevant when training aninstance of HubertForCTC."
        },
        {
            "name": "ctc_zero_infinity",
            "type": "bool",
            "optional": true,
            "default": "False",
            "description": "Whether to zero infinite losses and the associated gradients of torch.nn.CTCLoss. Infinite losses mainlyoccur when the inputs are too short to be aligned to the targets. Only relevant when training an instanceof HubertForCTC."
        },
        {
            "name": "use_weighted_layer_sum",
            "type": "bool",
            "optional": true,
            "default": "False",
            "description": "Whether to use a weighted average of layer outputs with learned weights. Only relevant when using aninstance of HubertForSequenceClassification."
        },
        {
            "name": "classifier_proj_size",
            "type": "int",
            "optional": true,
            "default": "256",
            "description": "Dimensionality of the projection before token mean-pooling for classification."
        }
    ],
    "return": ""
}