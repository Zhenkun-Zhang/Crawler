{
    "api": "transformers.TFXLMWithLMHeadModel.call",
    "type": "function",
    "version": "main",
    "args_list": [
        "input_ids:",
        "TFModelInputType",
        "|",
        "attention_mask",
        "|",
        "tf.Tensor",
        "|",
        "langs",
        "|",
        "tf.Tensor",
        "|",
        "token_type_ids",
        "|",
        "tf.Tensor",
        "|",
        "position_ids",
        "|",
        "tf.Tensor",
        "|",
        "lengths",
        "|",
        "tf.Tensor",
        "|",
        "cache",
        "tf.Tensor]]",
        "head_mask",
        "|",
        "tf.Tensor",
        "|",
        "inputs_embeds",
        "|",
        "tf.Tensor",
        "|",
        "output_attentions",
        "output_hidden_states",
        "return_dict",
        "training",
        ")"
    ],
    "params": [
        {
            "name": "input_ids",
            "type": "Numpy array,tf.Tensor of shape (batch_size, sequence_length)",
            "optional": false,
            "default": "",
            "description": "Indices of input sequence tokens in the vocabulary.Indices can be obtained using AutoTokenizer. See PreTrainedTokenizer.call() andPreTrainedTokenizer.encode() for details.What are input IDs?"
        },
        {
            "name": "attention_mask",
            "type": "Numpy array,tf.Tensor of shape (batch_size, sequence_length",
            "optional": true,
            "default": "",
            "description": "Mask to avoid performing attention on padding token indices. Mask values selected in [0, 1]:1 for tokens that are not masked,0 for tokens that are masked.What are attention masks?"
        },
        {
            "name": "langs",
            "type": "tf.Tensor,Numpy array of shape (batch_size, sequence_length",
            "optional": true,
            "default": "",
            "description": "A parallel sequence of tokens to be used to indicate the language of each token in the input. Indices arelanguages ids which can be obtained from the language names by using two conversion mappings provided inthe configuration of the model (only provided for multilingual models). More precisely, the language nameto language id mapping is in model.config.lang2id (which is a dictionary string to int) and thelanguage id to language name mapping is in model.config.id2lang (dictionary int to string).See usage examples detailed in the multilingual documentation."
        },
        {
            "name": "token_type_ids",
            "type": "Numpy array,tf.Tensor of shape (batch_size, sequence_length",
            "optional": true,
            "default": "",
            "description": "Segment token indices to indicate first and second portions of the inputs. Indices are selected in [0, 1]:0 corresponds to a sentence A token,1 corresponds to a sentence B token.What are token type IDs?"
        },
        {
            "name": "position_ids",
            "type": "Numpy array,tf.Tensor of shape (batch_size, sequence_length",
            "optional": true,
            "default": "",
            "description": "Indices of positions of each input sequence tokens in the position embeddings. Selected in the range [0, config.max_position_embeddings - 1].What are position IDs?"
        },
        {
            "name": "lengths",
            "type": "tf.Tensor,Numpy array of shape (batch_size,",
            "optional": true,
            "default": "",
            "description": "Length of each sentence that can be used to avoid performing attention on padding token indices. You canalso use attention_mask for the same result (see above), kept here for compatibility. Indices selected in[0, ..., input_ids.size(-1)]."
        },
        {
            "name": "cache",
            "type": "Dict[str, tf.Tensor]",
            "optional": true,
            "default": "",
            "description": "Dictionary string to tf.Tensor that contains precomputed hidden states (key and values in the attentionblocks) as computed by the model (see cache output below). Can be used to speed up sequential decoding.The dictionary object will be modified in-place during the forward pass to add newly computedhidden-states."
        },
        {
            "name": "head_mask",
            "type": "Numpy array,tf.Tensor of shape (num_heads,),(num_layers, num_heads",
            "optional": true,
            "default": "",
            "description": "Mask to nullify selected heads of the self-attention modules. Mask values selected in [0, 1]:1 indicates the head is not masked,0 indicates the head is masked."
        },
        {
            "name": "inputs_embeds",
            "type": "tf.Tensor of shape (batch_size, sequence_length, hidden_size",
            "optional": true,
            "default": "",
            "description": "Optionally, instead of passing input_ids you can choose to directly pass an embedded representation. Thisis useful if you want more control over how to convert input_ids indices into associated vectors than themodels internal embedding lookup matrix."
        },
        {
            "name": "output_attentions",
            "type": "bool",
            "optional": true,
            "default": "",
            "description": "Whether or not to return the attentions tensors of all attention layers. See attentions under returnedtensors for more detail. This argument can be used only in eager mode, in graph mode the value in theconfig will be used instead."
        },
        {
            "name": "output_hidden_states",
            "type": "bool",
            "optional": true,
            "default": "",
            "description": "Whether or not to return the hidden states of all layers. See hidden_states under returned tensors formore detail. This argument can be used only in eager mode, in graph mode the value in the config will beused instead."
        },
        {
            "name": "return_dict",
            "type": "bool",
            "optional": true,
            "default": "",
            "description": "Whether or not to return a ModelOutput instead of a plain tuple. This argument can be used ineager mode, in graph mode the value will always be set to True."
        },
        {
            "name": "training",
            "type": "bool",
            "optional": true,
            "default": "",
            "description": "Whether or not to use the model in training mode (some modules like dropout modules have differentbehaviors between training and evaluation)."
        }
    ],
    "return": "transformers.models.xlm.modeling_tf_xlm.TFXLMWithLMHeadModelOutput or tuple(tf.Tensor)"
}