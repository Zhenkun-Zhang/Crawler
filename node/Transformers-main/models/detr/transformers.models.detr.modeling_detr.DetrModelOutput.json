{
    "api": "transformers.models.detr.modeling_detr.DetrModelOutput",
    "type": "class",
    "version": "main",
    "args_list": [
        "last_hidden_state:",
        "past_key_values",
        "decoder_hidden_states",
        "...]]",
        "decoder_attentions",
        "...]]",
        "cross_attentions",
        "...]]",
        "encoder_last_hidden_state",
        "encoder_hidden_states",
        "...]]",
        "encoder_attentions",
        "...]]",
        "intermediate_hidden_states"
    ],
    "params": [
        {
            "name": "last_hidden_state",
            "type": "torch.FloatTensor of shape (batch_size, sequence_length, hidden_size)",
            "optional": false,
            "default": "",
            "description": "Sequence of hidden-states at the output of the last layer of the decoder of the model."
        },
        {
            "name": "decoder_hidden_states",
            "type": "tuple(torch.FloatTensor",
            "optional": true,
            "default": "",
            "description": "Tuple of torch.FloatTensor (one for the output of the embeddings + one for the output of each layer) ofshape (batch_size, sequence_length, hidden_size). Hidden-states of the decoder at the output of eachlayer plus the initial embedding outputs."
        },
        {
            "name": "decoder_attentions",
            "type": "tuple(torch.FloatTensor",
            "optional": true,
            "default": "",
            "description": "Tuple of torch.FloatTensor (one for each layer) of shape (batch_size, num_heads, sequence_length, sequence_length). Attentions weights of the decoder, after the attention softmax, used to compute theweighted average in the self-attention heads."
        },
        {
            "name": "cross_attentions",
            "type": "tuple(torch.FloatTensor",
            "optional": true,
            "default": "",
            "description": "Tuple of torch.FloatTensor (one for each layer) of shape (batch_size, num_heads, sequence_length, sequence_length). Attentions weights of the decoders cross-attention layer, after the attention softmax,used to compute the weighted average in the cross-attention heads."
        },
        {
            "name": "encoder_last_hidden_state",
            "type": "torch.FloatTensor of shape (batch_size, sequence_length, hidden_size",
            "optional": true,
            "default": "",
            "description": "Sequence of hidden-states at the output of the last layer of the encoder of the model."
        },
        {
            "name": "encoder_hidden_states",
            "type": "tuple(torch.FloatTensor",
            "optional": true,
            "default": "",
            "description": "Tuple of torch.FloatTensor (one for the output of the embeddings + one for the output of each layer) ofshape (batch_size, sequence_length, hidden_size). Hidden-states of the encoder at the output of eachlayer plus the initial embedding outputs."
        },
        {
            "name": "encoder_attentions",
            "type": "tuple(torch.FloatTensor",
            "optional": true,
            "default": "",
            "description": "Tuple of torch.FloatTensor (one for each layer) of shape (batch_size, num_heads, sequence_length, sequence_length). Attentions weights of the encoder, after the attention softmax, used to compute theweighted average in the self-attention heads."
        },
        {
            "name": "intermediate_hidden_states",
            "type": "torch.FloatTensor of shape (config.decoder_layers, batch_size, sequence_length, hidden_size",
            "optional": true,
            "default": "",
            "description": "Intermediate decoder activations, i.e. the output of each decoder layer, each of them gone through alayernorm."
        }
    ],
    "return": ""
}