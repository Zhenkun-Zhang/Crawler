{
    "api": "transformers.BridgeTowerForMaskedLM.forward",
    "type": "function",
    "version": "main",
    "args_list": [
        "input_ids:",
        "attention_mask",
        "token_type_ids",
        "pixel_values",
        "pixel_mask",
        "head_mask",
        "inputs_embeds",
        "image_embeds",
        "output_attentions",
        "output_hidden_states",
        "return_dict",
        "labels",
        ")"
    ],
    "params": [
        {
            "name": "input_ids",
            "type": "torch.LongTensor of shape (batch_size, sequence_length)",
            "optional": false,
            "default": "",
            "description": "Indices of input sequence tokens in the vocabulary. Indices can be obtained using AutoTokenizer. SeePreTrainedTokenizer.encode() and PreTrainedTokenizer.call() for details. What are inputIDs?"
        },
        {
            "name": "attention_mask",
            "type": "torch.FloatTensor of shape (batch_size, sequence_length",
            "optional": true,
            "default": "",
            "description": "Mask to avoid performing attention on padding token indices. Mask values selected in [0, 1]:1 for tokens that are not masked,0 for tokens that are masked.What are attention masks?"
        },
        {
            "name": "token_type_ids",
            "type": "torch.LongTensor of shape (batch_size, sequence_length",
            "optional": true,
            "default": "",
            "description": "Segment token indices to indicate first and second portions of the inputs. Indices are selected in [0, 1]:0 corresponds to a sentence A token,1 corresponds to a sentence B token.What are token type IDs?"
        },
        {
            "name": "pixel_values",
            "type": "torch.FloatTensor of shape (batch_size, num_channels, height, width)",
            "optional": false,
            "default": "",
            "description": "Pixel values. Pixel values can be obtained using BridgeTowerImageProcessor. SeeBridgeTowerImageProcessor.call() for details."
        },
        {
            "name": "pixel_mask",
            "type": "torch.LongTensor of shape (batch_size, height, width",
            "optional": true,
            "default": "",
            "description": "Mask to avoid performing attention on padding pixel values. Mask values selected in [0, 1]:1 for pixels that are real (i.e. not masked),0 for pixels that are padding (i.e. masked).What are attention masks? <../glossary.html#attention-mask>__"
        },
        {
            "name": "head_mask",
            "type": "torch.FloatTensor of shape (num_heads,),(num_layers, num_heads",
            "optional": true,
            "default": "",
            "description": "Mask to nullify selected heads of the self-attention modules. Mask values selected in [0, 1]:1 indicates the head is not masked,0 indicates the head is masked."
        },
        {
            "name": "inputs_embeds",
            "type": "torch.FloatTensor of shape (batch_size, sequence_length, hidden_size",
            "optional": true,
            "default": "",
            "description": "Optionally, instead of passing input_ids you can choose to directly pass an embedded representation. Thisis useful if you want more control over how to convert input_ids indices into associated vectors than themodels internal embedding lookup matrix."
        },
        {
            "name": "image_embeds",
            "type": "torch.FloatTensor of shape (batch_size, num_patches, hidden_size",
            "optional": true,
            "default": "",
            "description": "Optionally, instead of passing pixel_values, you can choose to directly pass an embedded representation.This is useful if you want more control over how to convert pixel_values into patch embeddings."
        },
        {
            "name": "image_token_type_idx",
            "type": "int",
            "optional": true,
            "default": "",
            "description": "The token type ids for images."
        },
        {
            "name": "output_attentions",
            "type": "bool",
            "optional": true,
            "default": "",
            "description": "Whether or not to return the attentions tensors of all attention layers. See attentions under returnedtensors for more detail."
        },
        {
            "name": "output_hidden_states",
            "type": "bool",
            "optional": true,
            "default": "",
            "description": "Whether or not to return the hidden states of all layers. See hidden_states under returned tensors formore detail."
        },
        {
            "name": "interpolate_pos_encoding",
            "type": "bool, defaults to False",
            "optional": false,
            "default": "",
            "description": "Whether to interpolate the pre-trained position encodings."
        },
        {
            "name": "return_dict",
            "type": "bool",
            "optional": true,
            "default": "",
            "description": "Whether or not to return a ModelOutput instead of a plain tuple."
        },
        {
            "name": "labels",
            "type": "torch.LongTensor of shape (batch_size, sequence_length",
            "optional": true,
            "default": "",
            "description": "Labels for computing the masked language modeling loss. Indices should be in [-100, 0, ..., config.vocab_size] (see input_ids docstring) Tokens with indices set to -100 are ignored (masked), theloss is only computed for the tokens with labels in [0, ..., config.vocab_size]"
        }
    ],
    "return": "transformers.modeling_outputs.MaskedLMOutput or tuple(torch.FloatTensor)"
}